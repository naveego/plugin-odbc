// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: publisher.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Pub {
  public static partial class Publisher
  {
    static readonly string __ServiceName = "pub.Publisher";

    static readonly grpc::Marshaller<global::Pub.ConfigureRequest> __Marshaller_pub_ConfigureRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ConfigureRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.ConfigureResponse> __Marshaller_pub_ConfigureResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ConfigureResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.ConnectRequest> __Marshaller_pub_ConnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ConnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.ConnectResponse> __Marshaller_pub_ConnectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ConnectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.DiscoverSchemasRequest> __Marshaller_pub_DiscoverSchemasRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.DiscoverSchemasRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.DiscoverSchemasResponse> __Marshaller_pub_DiscoverSchemasResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.DiscoverSchemasResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.ReadRequest> __Marshaller_pub_ReadRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ReadRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.Record> __Marshaller_pub_Record = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.Record.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.DisconnectRequest> __Marshaller_pub_DisconnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.DisconnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.DisconnectResponse> __Marshaller_pub_DisconnectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.DisconnectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.ConfigureConnectionRequest> __Marshaller_pub_ConfigureConnectionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ConfigureConnectionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.ConfigureConnectionResponse> __Marshaller_pub_ConfigureConnectionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ConfigureConnectionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.ConfigureQueryRequest> __Marshaller_pub_ConfigureQueryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ConfigureQueryRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.ConfigureQueryResponse> __Marshaller_pub_ConfigureQueryResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ConfigureQueryResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.ConfigureRealTimeRequest> __Marshaller_pub_ConfigureRealTimeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ConfigureRealTimeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.ConfigureRealTimeResponse> __Marshaller_pub_ConfigureRealTimeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ConfigureRealTimeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.BeginOAuthFlowRequest> __Marshaller_pub_BeginOAuthFlowRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.BeginOAuthFlowRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.BeginOAuthFlowResponse> __Marshaller_pub_BeginOAuthFlowResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.BeginOAuthFlowResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.CompleteOAuthFlowRequest> __Marshaller_pub_CompleteOAuthFlowRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.CompleteOAuthFlowRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.CompleteOAuthFlowResponse> __Marshaller_pub_CompleteOAuthFlowResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.CompleteOAuthFlowResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.ConfigureWriteRequest> __Marshaller_pub_ConfigureWriteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ConfigureWriteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.ConfigureWriteResponse> __Marshaller_pub_ConfigureWriteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ConfigureWriteResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.PrepareWriteRequest> __Marshaller_pub_PrepareWriteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.PrepareWriteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.PrepareWriteResponse> __Marshaller_pub_PrepareWriteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.PrepareWriteResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.RecordAck> __Marshaller_pub_RecordAck = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.RecordAck.Parser.ParseFrom);

    static readonly grpc::Method<global::Pub.ConfigureRequest, global::Pub.ConfigureResponse> __Method_Configure = new grpc::Method<global::Pub.ConfigureRequest, global::Pub.ConfigureResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Configure",
        __Marshaller_pub_ConfigureRequest,
        __Marshaller_pub_ConfigureResponse);

    static readonly grpc::Method<global::Pub.ConnectRequest, global::Pub.ConnectResponse> __Method_Connect = new grpc::Method<global::Pub.ConnectRequest, global::Pub.ConnectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Connect",
        __Marshaller_pub_ConnectRequest,
        __Marshaller_pub_ConnectResponse);

    static readonly grpc::Method<global::Pub.ConnectRequest, global::Pub.ConnectResponse> __Method_ConnectSession = new grpc::Method<global::Pub.ConnectRequest, global::Pub.ConnectResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ConnectSession",
        __Marshaller_pub_ConnectRequest,
        __Marshaller_pub_ConnectResponse);

    static readonly grpc::Method<global::Pub.DiscoverSchemasRequest, global::Pub.DiscoverSchemasResponse> __Method_DiscoverShapes = new grpc::Method<global::Pub.DiscoverSchemasRequest, global::Pub.DiscoverSchemasResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DiscoverShapes",
        __Marshaller_pub_DiscoverSchemasRequest,
        __Marshaller_pub_DiscoverSchemasResponse);

    static readonly grpc::Method<global::Pub.DiscoverSchemasRequest, global::Pub.DiscoverSchemasResponse> __Method_DiscoverSchemas = new grpc::Method<global::Pub.DiscoverSchemasRequest, global::Pub.DiscoverSchemasResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DiscoverSchemas",
        __Marshaller_pub_DiscoverSchemasRequest,
        __Marshaller_pub_DiscoverSchemasResponse);

    static readonly grpc::Method<global::Pub.ReadRequest, global::Pub.Record> __Method_PublishStream = new grpc::Method<global::Pub.ReadRequest, global::Pub.Record>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "PublishStream",
        __Marshaller_pub_ReadRequest,
        __Marshaller_pub_Record);

    static readonly grpc::Method<global::Pub.ReadRequest, global::Pub.Record> __Method_ReadStream = new grpc::Method<global::Pub.ReadRequest, global::Pub.Record>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ReadStream",
        __Marshaller_pub_ReadRequest,
        __Marshaller_pub_Record);

    static readonly grpc::Method<global::Pub.DisconnectRequest, global::Pub.DisconnectResponse> __Method_Disconnect = new grpc::Method<global::Pub.DisconnectRequest, global::Pub.DisconnectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Disconnect",
        __Marshaller_pub_DisconnectRequest,
        __Marshaller_pub_DisconnectResponse);

    static readonly grpc::Method<global::Pub.ConfigureConnectionRequest, global::Pub.ConfigureConnectionResponse> __Method_ConfigureConnection = new grpc::Method<global::Pub.ConfigureConnectionRequest, global::Pub.ConfigureConnectionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfigureConnection",
        __Marshaller_pub_ConfigureConnectionRequest,
        __Marshaller_pub_ConfigureConnectionResponse);

    static readonly grpc::Method<global::Pub.ConfigureQueryRequest, global::Pub.ConfigureQueryResponse> __Method_ConfigureQuery = new grpc::Method<global::Pub.ConfigureQueryRequest, global::Pub.ConfigureQueryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfigureQuery",
        __Marshaller_pub_ConfigureQueryRequest,
        __Marshaller_pub_ConfigureQueryResponse);

    static readonly grpc::Method<global::Pub.ConfigureRealTimeRequest, global::Pub.ConfigureRealTimeResponse> __Method_ConfigureRealTime = new grpc::Method<global::Pub.ConfigureRealTimeRequest, global::Pub.ConfigureRealTimeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfigureRealTime",
        __Marshaller_pub_ConfigureRealTimeRequest,
        __Marshaller_pub_ConfigureRealTimeResponse);

    static readonly grpc::Method<global::Pub.BeginOAuthFlowRequest, global::Pub.BeginOAuthFlowResponse> __Method_BeginOAuthFlow = new grpc::Method<global::Pub.BeginOAuthFlowRequest, global::Pub.BeginOAuthFlowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BeginOAuthFlow",
        __Marshaller_pub_BeginOAuthFlowRequest,
        __Marshaller_pub_BeginOAuthFlowResponse);

    static readonly grpc::Method<global::Pub.CompleteOAuthFlowRequest, global::Pub.CompleteOAuthFlowResponse> __Method_CompleteOAuthFlow = new grpc::Method<global::Pub.CompleteOAuthFlowRequest, global::Pub.CompleteOAuthFlowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CompleteOAuthFlow",
        __Marshaller_pub_CompleteOAuthFlowRequest,
        __Marshaller_pub_CompleteOAuthFlowResponse);

    static readonly grpc::Method<global::Pub.ConfigureWriteRequest, global::Pub.ConfigureWriteResponse> __Method_ConfigureWrite = new grpc::Method<global::Pub.ConfigureWriteRequest, global::Pub.ConfigureWriteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfigureWrite",
        __Marshaller_pub_ConfigureWriteRequest,
        __Marshaller_pub_ConfigureWriteResponse);

    static readonly grpc::Method<global::Pub.PrepareWriteRequest, global::Pub.PrepareWriteResponse> __Method_PrepareWrite = new grpc::Method<global::Pub.PrepareWriteRequest, global::Pub.PrepareWriteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PrepareWrite",
        __Marshaller_pub_PrepareWriteRequest,
        __Marshaller_pub_PrepareWriteResponse);

    static readonly grpc::Method<global::Pub.Record, global::Pub.RecordAck> __Method_WriteStream = new grpc::Method<global::Pub.Record, global::Pub.RecordAck>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "WriteStream",
        __Marshaller_pub_Record,
        __Marshaller_pub_RecordAck);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Pub.PublisherReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Publisher</summary>
    public abstract partial class PublisherBase
    {
      /// <summary>
      /// Configures the plugin.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.ConfigureResponse> Configure(global::Pub.ConfigureRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Instructs the plugin to connect to its data source.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.ConnectResponse> Connect(global::Pub.ConnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Instructs the plugin to connect to its data source
      /// and maintain a session where any change in the connection state
      /// or updates to OAuth information are streamed back to the host.
      /// The plugin should maintain this connection until Disconnect is called.
      /// This must be implemented if the plugin manifest has `canUseOAuth` set to true.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ConnectSession(global::Pub.ConnectRequest request, grpc::IServerStreamWriter<global::Pub.ConnectResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// (DEPRECATED) Requests a listing of schemas this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.DiscoverSchemasResponse> DiscoverShapes(global::Pub.DiscoverSchemasRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Requests a listing of schemas this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.DiscoverSchemasResponse> DiscoverSchemas(global::Pub.DiscoverSchemasRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// (DEPRECATED) PublishStream begins streaming records to the client from the plugin.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task PublishStream(global::Pub.ReadRequest request, grpc::IServerStreamWriter<global::Pub.Record> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ReadStream begins streaming records to the client from the plugin.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ReadStream(global::Pub.ReadRequest request, grpc::IServerStreamWriter<global::Pub.Record> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Tells the plugin to disconnect from its data source, stop any running publishes,
      /// and gracefully prepare to be shut down.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.DisconnectResponse> Disconnect(global::Pub.DisconnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Configures a connection which can be used to connect to a data source.
      /// This must be implemented if the plugin manifest has `canConfigureConnection` set to true.
      /// This is an alternative to having a `configSchema` element in the manifest.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.ConfigureConnectionResponse> ConfigureConnection(global::Pub.ConfigureConnectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Configures a query which can be used to publish a schema.
      /// This must be implemented if the plugin manifest has `canConfigureQuery` set to true.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.ConfigureQueryResponse> ConfigureQuery(global::Pub.ConfigureQueryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Configures settings for real time publishing (change detection).
      /// This must be implemented if the plugin manifest has `canPublishRealTime` set to true.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.ConfigureRealTimeResponse> ConfigureRealTime(global::Pub.ConfigureRealTimeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Invoked to begin an OAuth flow. This must be implemented if the plugin 
      /// manifest has `canUseOAuth` set to true.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.BeginOAuthFlowResponse> BeginOAuthFlow(global::Pub.BeginOAuthFlowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Invoked to complete an OAuth flow. This must be implemented if the plugin 
      /// manifest has `canUseOAuth` set to true.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.CompleteOAuthFlowResponse> CompleteOAuthFlow(global::Pub.CompleteOAuthFlowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Configures a write back which can be used to write back a schema to the source.
      /// This must be implemented if the plugin manifest has `canConfigureWrite` set to true.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.ConfigureWriteResponse> ConfigureWrite(global::Pub.ConfigureWriteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Invoked to begin a write back request
      /// This must be implemented if the manifest has `canWrite` set to true.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.PrepareWriteResponse> PrepareWrite(global::Pub.PrepareWriteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a stream of records to write back and opens a stream to receive acks for write backs
      /// This must be implemented if the manifest has `canWrite` set to true.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WriteStream(grpc::IAsyncStreamReader<global::Pub.Record> requestStream, grpc::IServerStreamWriter<global::Pub.RecordAck> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Publisher</summary>
    public partial class PublisherClient : grpc::ClientBase<PublisherClient>
    {
      /// <summary>Creates a new client for Publisher</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PublisherClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Publisher that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PublisherClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PublisherClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PublisherClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Configures the plugin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.ConfigureResponse Configure(global::Pub.ConfigureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Configure(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configures the plugin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.ConfigureResponse Configure(global::Pub.ConfigureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Configure, null, options, request);
      }
      /// <summary>
      /// Configures the plugin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.ConfigureResponse> ConfigureAsync(global::Pub.ConfigureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configures the plugin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.ConfigureResponse> ConfigureAsync(global::Pub.ConfigureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Configure, null, options, request);
      }
      /// <summary>
      /// Instructs the plugin to connect to its data source.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.ConnectResponse Connect(global::Pub.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Connect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Instructs the plugin to connect to its data source.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.ConnectResponse Connect(global::Pub.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      /// Instructs the plugin to connect to its data source.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.ConnectResponse> ConnectAsync(global::Pub.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Instructs the plugin to connect to its data source.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.ConnectResponse> ConnectAsync(global::Pub.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      /// Instructs the plugin to connect to its data source
      /// and maintain a session where any change in the connection state
      /// or updates to OAuth information are streamed back to the host.
      /// The plugin should maintain this connection until Disconnect is called.
      /// This must be implemented if the plugin manifest has `canUseOAuth` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Pub.ConnectResponse> ConnectSession(global::Pub.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Instructs the plugin to connect to its data source
      /// and maintain a session where any change in the connection state
      /// or updates to OAuth information are streamed back to the host.
      /// The plugin should maintain this connection until Disconnect is called.
      /// This must be implemented if the plugin manifest has `canUseOAuth` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Pub.ConnectResponse> ConnectSession(global::Pub.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ConnectSession, null, options, request);
      }
      /// <summary>
      /// (DEPRECATED) Requests a listing of schemas this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.DiscoverSchemasResponse DiscoverShapes(global::Pub.DiscoverSchemasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DiscoverShapes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// (DEPRECATED) Requests a listing of schemas this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.DiscoverSchemasResponse DiscoverShapes(global::Pub.DiscoverSchemasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DiscoverShapes, null, options, request);
      }
      /// <summary>
      /// (DEPRECATED) Requests a listing of schemas this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.DiscoverSchemasResponse> DiscoverShapesAsync(global::Pub.DiscoverSchemasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DiscoverShapesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// (DEPRECATED) Requests a listing of schemas this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.DiscoverSchemasResponse> DiscoverShapesAsync(global::Pub.DiscoverSchemasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DiscoverShapes, null, options, request);
      }
      /// <summary>
      /// Requests a listing of schemas this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.DiscoverSchemasResponse DiscoverSchemas(global::Pub.DiscoverSchemasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DiscoverSchemas(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests a listing of schemas this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.DiscoverSchemasResponse DiscoverSchemas(global::Pub.DiscoverSchemasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DiscoverSchemas, null, options, request);
      }
      /// <summary>
      /// Requests a listing of schemas this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.DiscoverSchemasResponse> DiscoverSchemasAsync(global::Pub.DiscoverSchemasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DiscoverSchemasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests a listing of schemas this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.DiscoverSchemasResponse> DiscoverSchemasAsync(global::Pub.DiscoverSchemasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DiscoverSchemas, null, options, request);
      }
      /// <summary>
      /// (DEPRECATED) PublishStream begins streaming records to the client from the plugin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Pub.Record> PublishStream(global::Pub.ReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// (DEPRECATED) PublishStream begins streaming records to the client from the plugin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Pub.Record> PublishStream(global::Pub.ReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_PublishStream, null, options, request);
      }
      /// <summary>
      /// ReadStream begins streaming records to the client from the plugin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Pub.Record> ReadStream(global::Pub.ReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ReadStream begins streaming records to the client from the plugin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Pub.Record> ReadStream(global::Pub.ReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ReadStream, null, options, request);
      }
      /// <summary>
      /// Tells the plugin to disconnect from its data source, stop any running publishes,
      /// and gracefully prepare to be shut down.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.DisconnectResponse Disconnect(global::Pub.DisconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Disconnect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Tells the plugin to disconnect from its data source, stop any running publishes,
      /// and gracefully prepare to be shut down.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.DisconnectResponse Disconnect(global::Pub.DisconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Disconnect, null, options, request);
      }
      /// <summary>
      /// Tells the plugin to disconnect from its data source, stop any running publishes,
      /// and gracefully prepare to be shut down.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.DisconnectResponse> DisconnectAsync(global::Pub.DisconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisconnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Tells the plugin to disconnect from its data source, stop any running publishes,
      /// and gracefully prepare to be shut down.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.DisconnectResponse> DisconnectAsync(global::Pub.DisconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Disconnect, null, options, request);
      }
      /// <summary>
      /// Configures a connection which can be used to connect to a data source.
      /// This must be implemented if the plugin manifest has `canConfigureConnection` set to true.
      /// This is an alternative to having a `configSchema` element in the manifest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.ConfigureConnectionResponse ConfigureConnection(global::Pub.ConfigureConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureConnection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configures a connection which can be used to connect to a data source.
      /// This must be implemented if the plugin manifest has `canConfigureConnection` set to true.
      /// This is an alternative to having a `configSchema` element in the manifest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.ConfigureConnectionResponse ConfigureConnection(global::Pub.ConfigureConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfigureConnection, null, options, request);
      }
      /// <summary>
      /// Configures a connection which can be used to connect to a data source.
      /// This must be implemented if the plugin manifest has `canConfigureConnection` set to true.
      /// This is an alternative to having a `configSchema` element in the manifest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.ConfigureConnectionResponse> ConfigureConnectionAsync(global::Pub.ConfigureConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureConnectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configures a connection which can be used to connect to a data source.
      /// This must be implemented if the plugin manifest has `canConfigureConnection` set to true.
      /// This is an alternative to having a `configSchema` element in the manifest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.ConfigureConnectionResponse> ConfigureConnectionAsync(global::Pub.ConfigureConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfigureConnection, null, options, request);
      }
      /// <summary>
      /// Configures a query which can be used to publish a schema.
      /// This must be implemented if the plugin manifest has `canConfigureQuery` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.ConfigureQueryResponse ConfigureQuery(global::Pub.ConfigureQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configures a query which can be used to publish a schema.
      /// This must be implemented if the plugin manifest has `canConfigureQuery` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.ConfigureQueryResponse ConfigureQuery(global::Pub.ConfigureQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfigureQuery, null, options, request);
      }
      /// <summary>
      /// Configures a query which can be used to publish a schema.
      /// This must be implemented if the plugin manifest has `canConfigureQuery` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.ConfigureQueryResponse> ConfigureQueryAsync(global::Pub.ConfigureQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configures a query which can be used to publish a schema.
      /// This must be implemented if the plugin manifest has `canConfigureQuery` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.ConfigureQueryResponse> ConfigureQueryAsync(global::Pub.ConfigureQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfigureQuery, null, options, request);
      }
      /// <summary>
      /// Configures settings for real time publishing (change detection).
      /// This must be implemented if the plugin manifest has `canPublishRealTime` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.ConfigureRealTimeResponse ConfigureRealTime(global::Pub.ConfigureRealTimeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureRealTime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configures settings for real time publishing (change detection).
      /// This must be implemented if the plugin manifest has `canPublishRealTime` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.ConfigureRealTimeResponse ConfigureRealTime(global::Pub.ConfigureRealTimeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfigureRealTime, null, options, request);
      }
      /// <summary>
      /// Configures settings for real time publishing (change detection).
      /// This must be implemented if the plugin manifest has `canPublishRealTime` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.ConfigureRealTimeResponse> ConfigureRealTimeAsync(global::Pub.ConfigureRealTimeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureRealTimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configures settings for real time publishing (change detection).
      /// This must be implemented if the plugin manifest has `canPublishRealTime` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.ConfigureRealTimeResponse> ConfigureRealTimeAsync(global::Pub.ConfigureRealTimeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfigureRealTime, null, options, request);
      }
      /// <summary>
      /// Invoked to begin an OAuth flow. This must be implemented if the plugin 
      /// manifest has `canUseOAuth` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.BeginOAuthFlowResponse BeginOAuthFlow(global::Pub.BeginOAuthFlowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeginOAuthFlow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Invoked to begin an OAuth flow. This must be implemented if the plugin 
      /// manifest has `canUseOAuth` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.BeginOAuthFlowResponse BeginOAuthFlow(global::Pub.BeginOAuthFlowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BeginOAuthFlow, null, options, request);
      }
      /// <summary>
      /// Invoked to begin an OAuth flow. This must be implemented if the plugin 
      /// manifest has `canUseOAuth` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.BeginOAuthFlowResponse> BeginOAuthFlowAsync(global::Pub.BeginOAuthFlowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeginOAuthFlowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Invoked to begin an OAuth flow. This must be implemented if the plugin 
      /// manifest has `canUseOAuth` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.BeginOAuthFlowResponse> BeginOAuthFlowAsync(global::Pub.BeginOAuthFlowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BeginOAuthFlow, null, options, request);
      }
      /// <summary>
      /// Invoked to complete an OAuth flow. This must be implemented if the plugin 
      /// manifest has `canUseOAuth` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.CompleteOAuthFlowResponse CompleteOAuthFlow(global::Pub.CompleteOAuthFlowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CompleteOAuthFlow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Invoked to complete an OAuth flow. This must be implemented if the plugin 
      /// manifest has `canUseOAuth` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.CompleteOAuthFlowResponse CompleteOAuthFlow(global::Pub.CompleteOAuthFlowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CompleteOAuthFlow, null, options, request);
      }
      /// <summary>
      /// Invoked to complete an OAuth flow. This must be implemented if the plugin 
      /// manifest has `canUseOAuth` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.CompleteOAuthFlowResponse> CompleteOAuthFlowAsync(global::Pub.CompleteOAuthFlowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CompleteOAuthFlowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Invoked to complete an OAuth flow. This must be implemented if the plugin 
      /// manifest has `canUseOAuth` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.CompleteOAuthFlowResponse> CompleteOAuthFlowAsync(global::Pub.CompleteOAuthFlowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CompleteOAuthFlow, null, options, request);
      }
      /// <summary>
      /// Configures a write back which can be used to write back a schema to the source.
      /// This must be implemented if the plugin manifest has `canConfigureWrite` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.ConfigureWriteResponse ConfigureWrite(global::Pub.ConfigureWriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureWrite(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configures a write back which can be used to write back a schema to the source.
      /// This must be implemented if the plugin manifest has `canConfigureWrite` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.ConfigureWriteResponse ConfigureWrite(global::Pub.ConfigureWriteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfigureWrite, null, options, request);
      }
      /// <summary>
      /// Configures a write back which can be used to write back a schema to the source.
      /// This must be implemented if the plugin manifest has `canConfigureWrite` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.ConfigureWriteResponse> ConfigureWriteAsync(global::Pub.ConfigureWriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigureWriteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Configures a write back which can be used to write back a schema to the source.
      /// This must be implemented if the plugin manifest has `canConfigureWrite` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.ConfigureWriteResponse> ConfigureWriteAsync(global::Pub.ConfigureWriteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfigureWrite, null, options, request);
      }
      /// <summary>
      /// Invoked to begin a write back request
      /// This must be implemented if the manifest has `canWrite` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.PrepareWriteResponse PrepareWrite(global::Pub.PrepareWriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrepareWrite(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Invoked to begin a write back request
      /// This must be implemented if the manifest has `canWrite` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.PrepareWriteResponse PrepareWrite(global::Pub.PrepareWriteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PrepareWrite, null, options, request);
      }
      /// <summary>
      /// Invoked to begin a write back request
      /// This must be implemented if the manifest has `canWrite` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.PrepareWriteResponse> PrepareWriteAsync(global::Pub.PrepareWriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrepareWriteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Invoked to begin a write back request
      /// This must be implemented if the manifest has `canWrite` set to true.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.PrepareWriteResponse> PrepareWriteAsync(global::Pub.PrepareWriteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PrepareWrite, null, options, request);
      }
      /// <summary>
      /// Creates a stream of records to write back and opens a stream to receive acks for write backs
      /// This must be implemented if the manifest has `canWrite` set to true.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Pub.Record, global::Pub.RecordAck> WriteStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WriteStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a stream of records to write back and opens a stream to receive acks for write backs
      /// This must be implemented if the manifest has `canWrite` set to true.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Pub.Record, global::Pub.RecordAck> WriteStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_WriteStream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PublisherClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PublisherClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PublisherBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Configure, serviceImpl.Configure)
          .AddMethod(__Method_Connect, serviceImpl.Connect)
          .AddMethod(__Method_ConnectSession, serviceImpl.ConnectSession)
          .AddMethod(__Method_DiscoverShapes, serviceImpl.DiscoverShapes)
          .AddMethod(__Method_DiscoverSchemas, serviceImpl.DiscoverSchemas)
          .AddMethod(__Method_PublishStream, serviceImpl.PublishStream)
          .AddMethod(__Method_ReadStream, serviceImpl.ReadStream)
          .AddMethod(__Method_Disconnect, serviceImpl.Disconnect)
          .AddMethod(__Method_ConfigureConnection, serviceImpl.ConfigureConnection)
          .AddMethod(__Method_ConfigureQuery, serviceImpl.ConfigureQuery)
          .AddMethod(__Method_ConfigureRealTime, serviceImpl.ConfigureRealTime)
          .AddMethod(__Method_BeginOAuthFlow, serviceImpl.BeginOAuthFlow)
          .AddMethod(__Method_CompleteOAuthFlow, serviceImpl.CompleteOAuthFlow)
          .AddMethod(__Method_ConfigureWrite, serviceImpl.ConfigureWrite)
          .AddMethod(__Method_PrepareWrite, serviceImpl.PrepareWrite)
          .AddMethod(__Method_WriteStream, serviceImpl.WriteStream).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PublisherBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Configure, serviceImpl.Configure);
      serviceBinder.AddMethod(__Method_Connect, serviceImpl.Connect);
      serviceBinder.AddMethod(__Method_ConnectSession, serviceImpl.ConnectSession);
      serviceBinder.AddMethod(__Method_DiscoverShapes, serviceImpl.DiscoverShapes);
      serviceBinder.AddMethod(__Method_DiscoverSchemas, serviceImpl.DiscoverSchemas);
      serviceBinder.AddMethod(__Method_PublishStream, serviceImpl.PublishStream);
      serviceBinder.AddMethod(__Method_ReadStream, serviceImpl.ReadStream);
      serviceBinder.AddMethod(__Method_Disconnect, serviceImpl.Disconnect);
      serviceBinder.AddMethod(__Method_ConfigureConnection, serviceImpl.ConfigureConnection);
      serviceBinder.AddMethod(__Method_ConfigureQuery, serviceImpl.ConfigureQuery);
      serviceBinder.AddMethod(__Method_ConfigureRealTime, serviceImpl.ConfigureRealTime);
      serviceBinder.AddMethod(__Method_BeginOAuthFlow, serviceImpl.BeginOAuthFlow);
      serviceBinder.AddMethod(__Method_CompleteOAuthFlow, serviceImpl.CompleteOAuthFlow);
      serviceBinder.AddMethod(__Method_ConfigureWrite, serviceImpl.ConfigureWrite);
      serviceBinder.AddMethod(__Method_PrepareWrite, serviceImpl.PrepareWrite);
      serviceBinder.AddMethod(__Method_WriteStream, serviceImpl.WriteStream);
    }

  }
}
#endregion
