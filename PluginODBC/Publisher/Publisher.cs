// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: publisher.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pub {

  /// <summary>Holder for reflection information generated from publisher.proto</summary>
  public static partial class PublisherReflection {

    #region Descriptor
    /// <summary>File descriptor for publisher.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PublisherReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9wdWJsaXNoZXIucHJvdG8SA3B1YiKFAQoQQ29uZmlndXJlUmVxdWVzdBIg",
            "Cglsb2dfbGV2ZWwYASABKA4yDS5wdWIuTG9nTGV2ZWwSFQoNbG9nX2RpcmVj",
            "dG9yeRgCIAEoCRIbChNwZXJtYW5lbnRfZGlyZWN0b3J5GAMgASgJEhsKE3Rl",
            "bXBvcmFyeV9kaXJlY3RvcnkYBCABKAkiEwoRQ29uZmlndXJlUmVzcG9uc2Ui",
            "dwoOQ29ubmVjdFJlcXVlc3QSFQoNc2V0dGluZ3NfanNvbhgCIAEoCRI0ChNv",
            "YXV0aF9jb25maWd1cmF0aW9uGAMgASgLMhcucHViLk9BdXRoQ29uZmlndXJh",
            "dGlvbhIYChBvYXV0aF9zdGF0ZV9qc29uGAQgASgJInIKD0Nvbm5lY3RSZXNw",
            "b25zZRIWCg5zZXR0aW5nc19lcnJvchgBIAEoCRIYChBjb25uZWN0aW9uX2Vy",
            "cm9yGAIgASgJEhMKC29hdXRoX2Vycm9yGAMgASgJEhgKEG9hdXRoX3N0YXRl",
            "X2pzb24YBCABKAkiwwEKC1JlYWRSZXF1ZXN0EhsKBnNjaGVtYRgBIAEoCzIL",
            "LnB1Yi5TY2hlbWESDQoFbGltaXQYAiABKA0SIwoHZmlsdGVycxgDIAMoCzIS",
            "LnB1Yi5QdWJsaXNoRmlsdGVyEh8KF3JlYWxfdGltZV9zZXR0aW5nc19qc29u",
            "GAYgASgJEhwKFHJlYWxfdGltZV9zdGF0ZV9qc29uGAcgASgJEg4KBmpvYl9p",
            "ZBgIIAEoCRIUCgxkYXRhX3ZlcnNpb24YCSABKA0ijwEKDVB1Ymxpc2hGaWx0",
            "ZXISJQoEa2luZBgBIAEoDjIXLnB1Yi5QdWJsaXNoRmlsdGVyLktpbmQSEwoL",
            "cHJvcGVydHlfaWQYAiABKAkSDQoFdmFsdWUYAyABKAkiMwoES2luZBIKCgZF",
            "UVVBTFMQABINCglMRVNTX1RIQU4QARIQCgxHUkVBVEVSX1RIQU4QAiKcAQoW",
            "RGlzY292ZXJTY2hlbWFzUmVxdWVzdBIuCgRtb2RlGAEgASgOMiAucHViLkRp",
            "c2NvdmVyU2NoZW1hc1JlcXVlc3QuTW9kZRIfCgp0b19yZWZyZXNoGAIgAygL",
            "MgsucHViLlNjaGVtYRITCgtzYW1wbGVfc2l6ZRgEIAEoDSIcCgRNb2RlEgcK",
            "A0FMTBAAEgsKB1JFRlJFU0gQASI3ChdEaXNjb3ZlclNjaGVtYXNSZXNwb25z",
            "ZRIcCgdzY2hlbWFzGAEgAygLMgsucHViLlNjaGVtYSLEAgoGU2NoZW1hEgoK",
            "AmlkGAEgASgJEgwKBG5hbWUYAiABKAkSEwoLZGVzY3JpcHRpb24YAyABKAkS",
            "IQoKcHJvcGVydGllcxgEIAMoCzINLnB1Yi5Qcm9wZXJ0eRIZCgVjb3VudBgF",
            "IAEoCzIKLnB1Yi5Db3VudBIbCgZzYW1wbGUYBiADKAsyCy5wdWIuUmVjb3Jk",
            "Eg0KBXF1ZXJ5GAcgASgJEhsKE3B1Ymxpc2hlcl9tZXRhX2pzb24YCCABKAkS",
            "DgoGZXJyb3JzGAkgAygJEjoKE2RhdGFfZmxvd19kaXJlY3Rpb24YCiABKA4y",
            "HS5wdWIuU2NoZW1hLkRhdGFGbG93RGlyZWN0aW9uIjgKEURhdGFGbG93RGly",
            "ZWN0aW9uEggKBFJFQUQQABIJCgVXUklURRABEg4KClJFQURfV1JJVEUQAiJn",
            "CgVDb3VudBIdCgRraW5kGAEgASgOMg8ucHViLkNvdW50LktpbmQSDQoFdmFs",
            "dWUYAiABKAUiMAoES2luZBIPCgtVTkFWQUlMQUJMRRAAEgwKCEVTVElNQVRF",
            "EAESCQoFRVhBQ1QQAiLqAQoIUHJvcGVydHkSCgoCaWQYASABKAkSDAoEbmFt",
            "ZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRIfCgR0eXBlGAQgASgOMhEu",
            "cHViLlByb3BlcnR5VHlwZRIOCgZpc19rZXkYBSABKAgSGQoRaXNfY3JlYXRl",
            "X2NvdW50ZXIYBiABKAgSGQoRaXNfdXBkYXRlX2NvdW50ZXIYByABKAgSGwoT",
            "cHVibGlzaGVyX21ldGFfanNvbhgIIAEoCRIWCg50eXBlX2F0X3NvdXJjZRgJ",
            "IAEoCRITCgtpc19udWxsYWJsZRgKIAEoCCITChFEaXNjb25uZWN0UmVxdWVz",
            "dCIUChJEaXNjb25uZWN0UmVzcG9uc2Ui2gEKBlJlY29yZBIiCgZhY3Rpb24Y",
            "ASABKA4yEi5wdWIuUmVjb3JkLkFjdGlvbhIRCglkYXRhX2pzb24YAiABKAkS",
            "HAoUcmVhbF90aW1lX3N0YXRlX2pzb24YAyABKAkSDQoFY2F1c2UYBCABKAkS",
            "FgoOY29ycmVsYXRpb25faWQYBSABKAkiVAoGQWN0aW9uEgoKBlVQU0VSVBAA",
            "EgoKBklOU0VSVBABEgoKBlVQREFURRACEgoKBkRFTEVURRADEhoKFlJFQUxf",
            "VElNRV9TVEFURV9DT01NSVQQBCJEChVDb25maWd1cmVRdWVyeVJlcXVlc3QS",
            "KwoEZm9ybRgBIAEoCzIdLnB1Yi5Db25maWd1cmF0aW9uRm9ybVJlcXVlc3Qi",
            "YwoWQ29uZmlndXJlUXVlcnlSZXNwb25zZRIsCgRmb3JtGAEgASgLMh4ucHVi",
            "LkNvbmZpZ3VyYXRpb25Gb3JtUmVzcG9uc2USGwoGc2NoZW1hGAIgASgLMgsu",
            "cHViLlNjaGVtYSJ3ChpDb25maWd1cmVDb25uZWN0aW9uUmVxdWVzdBIrCgRm",
            "b3JtGAEgASgLMh0ucHViLkNvbmZpZ3VyYXRpb25Gb3JtUmVxdWVzdBIsCg9j",
            "b25uZWN0X3JlcXVlc3QYAiABKAsyEy5wdWIuQ29ubmVjdFJlcXVlc3Qiewob",
            "Q29uZmlndXJlQ29ubmVjdGlvblJlc3BvbnNlEiwKBGZvcm0YASABKAsyHi5w",
            "dWIuQ29uZmlndXJhdGlvbkZvcm1SZXNwb25zZRIuChBjb25uZWN0X3Jlc3Bv",
            "bnNlGAIgASgLMhQucHViLkNvbm5lY3RSZXNwb25zZSJkChhDb25maWd1cmVS",
            "ZWFsVGltZVJlcXVlc3QSKwoEZm9ybRgBIAEoCzIdLnB1Yi5Db25maWd1cmF0",
            "aW9uRm9ybVJlcXVlc3QSGwoGc2NoZW1hGAIgASgLMgsucHViLlNjaGVtYSJJ",
            "ChlDb25maWd1cmVSZWFsVGltZVJlc3BvbnNlEiwKBGZvcm0YASABKAsyHi5w",
            "dWIuQ29uZmlndXJhdGlvbkZvcm1SZXNwb25zZSJBChhDb25maWd1cmF0aW9u",
            "Rm9ybVJlcXVlc3QSEQoJZGF0YV9qc29uGAEgASgJEhIKCnN0YXRlX2pzb24Y",
            "AiABKAkikgEKGUNvbmZpZ3VyYXRpb25Gb3JtUmVzcG9uc2USEwoLc2NoZW1h",
            "X2pzb24YASABKAkSDwoHdWlfanNvbhgCIAEoCRISCgpzdGF0ZV9qc29uGAMg",
            "ASgJEhEKCWRhdGFfanNvbhgEIAEoCRIYChBkYXRhX2Vycm9yc19qc29uGAUg",
            "ASgJEg4KBmVycm9ycxgGIAMoCSJdChVCZWdpbk9BdXRoRmxvd1JlcXVlc3QS",
            "LgoNY29uZmlndXJhdGlvbhgBIAEoCzIXLnB1Yi5PQXV0aENvbmZpZ3VyYXRp",
            "b24SFAoMcmVkaXJlY3RfdXJsGAIgASgJIjMKFkJlZ2luT0F1dGhGbG93UmVz",
            "cG9uc2USGQoRYXV0aG9yaXphdGlvbl91cmwYASABKAkidwoYQ29tcGxldGVP",
            "QXV0aEZsb3dSZXF1ZXN0Ei4KDWNvbmZpZ3VyYXRpb24YASABKAsyFy5wdWIu",
            "T0F1dGhDb25maWd1cmF0aW9uEhQKDHJlZGlyZWN0X3VybBgCIAEoCRIVCg1y",
            "ZWRpcmVjdF9ib2R5GAMgASgJIloKEk9BdXRoQ29uZmlndXJhdGlvbhIRCglj",
            "bGllbnRfaWQYASABKAkSFQoNY2xpZW50X3NlY3JldBgCIAEoCRIaChJjb25m",
            "aWd1cmF0aW9uX2pzb24YAyABKAkiNQoZQ29tcGxldGVPQXV0aEZsb3dSZXNw",
            "b25zZRIYChBvYXV0aF9zdGF0ZV9qc29uGAEgASgJIkQKFUNvbmZpZ3VyZVdy",
            "aXRlUmVxdWVzdBIrCgRmb3JtGAEgASgLMh0ucHViLkNvbmZpZ3VyYXRpb25G",
            "b3JtUmVxdWVzdCJjChZDb25maWd1cmVXcml0ZVJlc3BvbnNlEiwKBGZvcm0Y",
            "ASABKAsyHi5wdWIuQ29uZmlndXJhdGlvbkZvcm1SZXNwb25zZRIbCgZzY2hl",
            "bWEYAiABKAsyCy5wdWIuU2NoZW1hIk4KE1ByZXBhcmVXcml0ZVJlcXVlc3QS",
            "GgoSY29tbWl0X3NsYV9zZWNvbmRzGAEgASgFEhsKBnNjaGVtYRgCIAEoCzIL",
            "LnB1Yi5TY2hlbWEiFgoUUHJlcGFyZVdyaXRlUmVzcG9uc2UiMgoJUmVjb3Jk",
            "QWNrEhYKDmNvcnJlbGF0aW9uX2lkGAEgASgJEg0KBWVycm9yGAIgASgJKj8K",
            "CExvZ0xldmVsEgkKBUVycm9yEAASCAoEV2FybhABEggKBEluZm8QAhIJCgVE",
            "ZWJ1ZxADEgkKBVRyYWNlEAQqkgEKDFByb3BlcnR5VHlwZRIKCgZTVFJJTkcQ",
            "ABIICgRCT09MEAISCwoHSU5URUdFUhADEgkKBUZMT0FUEAQSCwoHREVDSU1B",
            "TBAFEggKBERBVEUQBhIICgRUSU1FEAcSDAoIREFURVRJTUUQCBIICgRURVhU",
            "EAkSCAoEQkxPQhAKEggKBEpTT04QCxIHCgNYTUwQDDL1CAoJUHVibGlzaGVy",
            "EjwKCUNvbmZpZ3VyZRIVLnB1Yi5Db25maWd1cmVSZXF1ZXN0GhYucHViLkNv",
            "bmZpZ3VyZVJlc3BvbnNlIgASNgoHQ29ubmVjdBITLnB1Yi5Db25uZWN0UmVx",
            "dWVzdBoULnB1Yi5Db25uZWN0UmVzcG9uc2UiABI/Cg5Db25uZWN0U2Vzc2lv",
            "bhITLnB1Yi5Db25uZWN0UmVxdWVzdBoULnB1Yi5Db25uZWN0UmVzcG9uc2Ui",
            "ADABElAKDkRpc2NvdmVyU2hhcGVzEhsucHViLkRpc2NvdmVyU2NoZW1hc1Jl",
            "cXVlc3QaHC5wdWIuRGlzY292ZXJTY2hlbWFzUmVzcG9uc2UiA4gCARJOCg9E",
            "aXNjb3ZlclNjaGVtYXMSGy5wdWIuRGlzY292ZXJTY2hlbWFzUmVxdWVzdBoc",
            "LnB1Yi5EaXNjb3ZlclNjaGVtYXNSZXNwb25zZSIAEjUKDVB1Ymxpc2hTdHJl",
            "YW0SEC5wdWIuUmVhZFJlcXVlc3QaCy5wdWIuUmVjb3JkIgOIAgEwARIvCgpS",
            "ZWFkU3RyZWFtEhAucHViLlJlYWRSZXF1ZXN0GgsucHViLlJlY29yZCIAMAES",
            "PwoKRGlzY29ubmVjdBIWLnB1Yi5EaXNjb25uZWN0UmVxdWVzdBoXLnB1Yi5E",
            "aXNjb25uZWN0UmVzcG9uc2UiABJaChNDb25maWd1cmVDb25uZWN0aW9uEh8u",
            "cHViLkNvbmZpZ3VyZUNvbm5lY3Rpb25SZXF1ZXN0GiAucHViLkNvbmZpZ3Vy",
            "ZUNvbm5lY3Rpb25SZXNwb25zZSIAEksKDkNvbmZpZ3VyZVF1ZXJ5EhoucHVi",
            "LkNvbmZpZ3VyZVF1ZXJ5UmVxdWVzdBobLnB1Yi5Db25maWd1cmVRdWVyeVJl",
            "c3BvbnNlIgASVAoRQ29uZmlndXJlUmVhbFRpbWUSHS5wdWIuQ29uZmlndXJl",
            "UmVhbFRpbWVSZXF1ZXN0Gh4ucHViLkNvbmZpZ3VyZVJlYWxUaW1lUmVzcG9u",
            "c2UiABJLCg5CZWdpbk9BdXRoRmxvdxIaLnB1Yi5CZWdpbk9BdXRoRmxvd1Jl",
            "cXVlc3QaGy5wdWIuQmVnaW5PQXV0aEZsb3dSZXNwb25zZSIAElQKEUNvbXBs",
            "ZXRlT0F1dGhGbG93Eh0ucHViLkNvbXBsZXRlT0F1dGhGbG93UmVxdWVzdBoe",
            "LnB1Yi5Db21wbGV0ZU9BdXRoRmxvd1Jlc3BvbnNlIgASSwoOQ29uZmlndXJl",
            "V3JpdGUSGi5wdWIuQ29uZmlndXJlV3JpdGVSZXF1ZXN0GhsucHViLkNvbmZp",
            "Z3VyZVdyaXRlUmVzcG9uc2UiABJFCgxQcmVwYXJlV3JpdGUSGC5wdWIuUHJl",
            "cGFyZVdyaXRlUmVxdWVzdBoZLnB1Yi5QcmVwYXJlV3JpdGVSZXNwb25zZSIA",
            "EjAKC1dyaXRlU3RyZWFtEgsucHViLlJlY29yZBoOLnB1Yi5SZWNvcmRBY2si",
            "ACgBMAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pub.LogLevel), typeof(global::Pub.PropertyType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConfigureRequest), global::Pub.ConfigureRequest.Parser, new[]{ "LogLevel", "LogDirectory", "PermanentDirectory", "TemporaryDirectory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConfigureResponse), global::Pub.ConfigureResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConnectRequest), global::Pub.ConnectRequest.Parser, new[]{ "SettingsJson", "OauthConfiguration", "OauthStateJson" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConnectResponse), global::Pub.ConnectResponse.Parser, new[]{ "SettingsError", "ConnectionError", "OauthError", "OauthStateJson" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ReadRequest), global::Pub.ReadRequest.Parser, new[]{ "Schema", "Limit", "Filters", "RealTimeSettingsJson", "RealTimeStateJson", "JobId", "DataVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.PublishFilter), global::Pub.PublishFilter.Parser, new[]{ "Kind", "PropertyId", "Value" }, null, new[]{ typeof(global::Pub.PublishFilter.Types.Kind) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.DiscoverSchemasRequest), global::Pub.DiscoverSchemasRequest.Parser, new[]{ "Mode", "ToRefresh", "SampleSize" }, null, new[]{ typeof(global::Pub.DiscoverSchemasRequest.Types.Mode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.DiscoverSchemasResponse), global::Pub.DiscoverSchemasResponse.Parser, new[]{ "Schemas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.Schema), global::Pub.Schema.Parser, new[]{ "Id", "Name", "Description", "Properties", "Count", "Sample", "Query", "PublisherMetaJson", "Errors", "DataFlowDirection" }, null, new[]{ typeof(global::Pub.Schema.Types.DataFlowDirection) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.Count), global::Pub.Count.Parser, new[]{ "Kind", "Value" }, null, new[]{ typeof(global::Pub.Count.Types.Kind) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.Property), global::Pub.Property.Parser, new[]{ "Id", "Name", "Description", "Type", "IsKey", "IsCreateCounter", "IsUpdateCounter", "PublisherMetaJson", "TypeAtSource", "IsNullable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.DisconnectRequest), global::Pub.DisconnectRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.DisconnectResponse), global::Pub.DisconnectResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.Record), global::Pub.Record.Parser, new[]{ "Action", "DataJson", "RealTimeStateJson", "Cause", "CorrelationId" }, null, new[]{ typeof(global::Pub.Record.Types.Action) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConfigureQueryRequest), global::Pub.ConfigureQueryRequest.Parser, new[]{ "Form" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConfigureQueryResponse), global::Pub.ConfigureQueryResponse.Parser, new[]{ "Form", "Schema" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConfigureConnectionRequest), global::Pub.ConfigureConnectionRequest.Parser, new[]{ "Form", "ConnectRequest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConfigureConnectionResponse), global::Pub.ConfigureConnectionResponse.Parser, new[]{ "Form", "ConnectResponse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConfigureRealTimeRequest), global::Pub.ConfigureRealTimeRequest.Parser, new[]{ "Form", "Schema" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConfigureRealTimeResponse), global::Pub.ConfigureRealTimeResponse.Parser, new[]{ "Form" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConfigurationFormRequest), global::Pub.ConfigurationFormRequest.Parser, new[]{ "DataJson", "StateJson" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConfigurationFormResponse), global::Pub.ConfigurationFormResponse.Parser, new[]{ "SchemaJson", "UiJson", "StateJson", "DataJson", "DataErrorsJson", "Errors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.BeginOAuthFlowRequest), global::Pub.BeginOAuthFlowRequest.Parser, new[]{ "Configuration", "RedirectUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.BeginOAuthFlowResponse), global::Pub.BeginOAuthFlowResponse.Parser, new[]{ "AuthorizationUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.CompleteOAuthFlowRequest), global::Pub.CompleteOAuthFlowRequest.Parser, new[]{ "Configuration", "RedirectUrl", "RedirectBody" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.OAuthConfiguration), global::Pub.OAuthConfiguration.Parser, new[]{ "ClientId", "ClientSecret", "ConfigurationJson" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.CompleteOAuthFlowResponse), global::Pub.CompleteOAuthFlowResponse.Parser, new[]{ "OauthStateJson" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConfigureWriteRequest), global::Pub.ConfigureWriteRequest.Parser, new[]{ "Form" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConfigureWriteResponse), global::Pub.ConfigureWriteResponse.Parser, new[]{ "Form", "Schema" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.PrepareWriteRequest), global::Pub.PrepareWriteRequest.Parser, new[]{ "CommitSlaSeconds", "Schema" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.PrepareWriteResponse), global::Pub.PrepareWriteResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.RecordAck), global::Pub.RecordAck.Parser, new[]{ "CorrelationId", "Error" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LogLevel {
    [pbr::OriginalName("Error")] Error = 0,
    [pbr::OriginalName("Warn")] Warn = 1,
    [pbr::OriginalName("Info")] Info = 2,
    [pbr::OriginalName("Debug")] Debug = 3,
    [pbr::OriginalName("Trace")] Trace = 4,
  }

  public enum PropertyType {
    /// <summary>
    /// Unicode string, less than 1024 characters.
    /// </summary>
    [pbr::OriginalName("STRING")] String = 0,
    /// <summary>
    /// true/false.
    /// </summary>
    [pbr::OriginalName("BOOL")] Bool = 2,
    /// <summary>
    /// 64-bit integer.
    /// </summary>
    [pbr::OriginalName("INTEGER")] Integer = 3,
    /// <summary>
    /// 64-bit floating point number.
    /// </summary>
    [pbr::OriginalName("FLOAT")] Float = 4,
    /// <summary>
    /// Absolute precision number of any size.
    /// </summary>
    [pbr::OriginalName("DECIMAL")] Decimal = 5,
    /// <summary>
    /// Date (no time).
    /// </summary>
    [pbr::OriginalName("DATE")] Date = 6,
    /// <summary>
    /// Time (no date).
    /// </summary>
    [pbr::OriginalName("TIME")] Time = 7,
    /// <summary>
    /// Datetime (date and time).
    /// </summary>
    [pbr::OriginalName("DATETIME")] Datetime = 8,
    /// <summary>
    /// Unicode string, more than 1024 characters.
    /// </summary>
    [pbr::OriginalName("TEXT")] Text = 9,
    /// <summary>
    /// Binary data as a base-64 encoded string.
    /// </summary>
    [pbr::OriginalName("BLOB")] Blob = 10,
    /// <summary>
    /// A JSON object as a string.
    /// </summary>
    [pbr::OriginalName("JSON")] Json = 11,
    /// <summary>
    /// An XML object as a string.
    /// </summary>
    [pbr::OriginalName("XML")] Xml = 12,
  }

  #endregion

  #region Messages
  public sealed partial class ConfigureRequest : pb::IMessage<ConfigureRequest> {
    private static readonly pb::MessageParser<ConfigureRequest> _parser = new pb::MessageParser<ConfigureRequest>(() => new ConfigureRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigureRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureRequest(ConfigureRequest other) : this() {
      logLevel_ = other.logLevel_;
      logDirectory_ = other.logDirectory_;
      permanentDirectory_ = other.permanentDirectory_;
      temporaryDirectory_ = other.temporaryDirectory_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureRequest Clone() {
      return new ConfigureRequest(this);
    }

    /// <summary>Field number for the "log_level" field.</summary>
    public const int LogLevelFieldNumber = 1;
    private global::Pub.LogLevel logLevel_ = 0;
    /// <summary>
    /// The level of logging information the plugin should emit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.LogLevel LogLevel {
      get { return logLevel_; }
      set {
        logLevel_ = value;
      }
    }

    /// <summary>Field number for the "log_directory" field.</summary>
    public const int LogDirectoryFieldNumber = 2;
    private string logDirectory_ = "";
    /// <summary>
    /// Directory where log files should be stored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogDirectory {
      get { return logDirectory_; }
      set {
        logDirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "permanent_directory" field.</summary>
    public const int PermanentDirectoryFieldNumber = 3;
    private string permanentDirectory_ = "";
    /// <summary>
    /// Directory where the plugin can store data permanently.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PermanentDirectory {
      get { return permanentDirectory_; }
      set {
        permanentDirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "temporary_directory" field.</summary>
    public const int TemporaryDirectoryFieldNumber = 4;
    private string temporaryDirectory_ = "";
    /// <summary>
    /// Directory where the plugin can store temporary information which may be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TemporaryDirectory {
      get { return temporaryDirectory_; }
      set {
        temporaryDirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigureRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigureRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LogLevel != other.LogLevel) return false;
      if (LogDirectory != other.LogDirectory) return false;
      if (PermanentDirectory != other.PermanentDirectory) return false;
      if (TemporaryDirectory != other.TemporaryDirectory) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LogLevel != 0) hash ^= LogLevel.GetHashCode();
      if (LogDirectory.Length != 0) hash ^= LogDirectory.GetHashCode();
      if (PermanentDirectory.Length != 0) hash ^= PermanentDirectory.GetHashCode();
      if (TemporaryDirectory.Length != 0) hash ^= TemporaryDirectory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LogLevel != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LogLevel);
      }
      if (LogDirectory.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LogDirectory);
      }
      if (PermanentDirectory.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PermanentDirectory);
      }
      if (TemporaryDirectory.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TemporaryDirectory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LogLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogLevel);
      }
      if (LogDirectory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogDirectory);
      }
      if (PermanentDirectory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PermanentDirectory);
      }
      if (TemporaryDirectory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TemporaryDirectory);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigureRequest other) {
      if (other == null) {
        return;
      }
      if (other.LogLevel != 0) {
        LogLevel = other.LogLevel;
      }
      if (other.LogDirectory.Length != 0) {
        LogDirectory = other.LogDirectory;
      }
      if (other.PermanentDirectory.Length != 0) {
        PermanentDirectory = other.PermanentDirectory;
      }
      if (other.TemporaryDirectory.Length != 0) {
        TemporaryDirectory = other.TemporaryDirectory;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            logLevel_ = (global::Pub.LogLevel) input.ReadEnum();
            break;
          }
          case 18: {
            LogDirectory = input.ReadString();
            break;
          }
          case 26: {
            PermanentDirectory = input.ReadString();
            break;
          }
          case 34: {
            TemporaryDirectory = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigureResponse : pb::IMessage<ConfigureResponse> {
    private static readonly pb::MessageParser<ConfigureResponse> _parser = new pb::MessageParser<ConfigureResponse>(() => new ConfigureResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigureResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureResponse(ConfigureResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureResponse Clone() {
      return new ConfigureResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigureResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigureResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigureResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ConnectRequest : pb::IMessage<ConnectRequest> {
    private static readonly pb::MessageParser<ConnectRequest> _parser = new pb::MessageParser<ConnectRequest>(() => new ConnectRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest(ConnectRequest other) : this() {
      settingsJson_ = other.settingsJson_;
      oauthConfiguration_ = other.oauthConfiguration_ != null ? other.oauthConfiguration_.Clone() : null;
      oauthStateJson_ = other.oauthStateJson_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest Clone() {
      return new ConnectRequest(this);
    }

    /// <summary>Field number for the "settings_json" field.</summary>
    public const int SettingsJsonFieldNumber = 2;
    private string settingsJson_ = "";
    /// <summary>
    /// The settings the publisher should use to connect, as a JSON string.
    /// The JSON will be based on the JSONSchema defined in the publisher's package.json.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettingsJson {
      get { return settingsJson_; }
      set {
        settingsJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oauth_configuration" field.</summary>
    public const int OauthConfigurationFieldNumber = 3;
    private global::Pub.OAuthConfiguration oauthConfiguration_;
    /// <summary>
    /// OAuth configuration information which the plugin may need to
    /// obtain an access token using the OAuth state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.OAuthConfiguration OauthConfiguration {
      get { return oauthConfiguration_; }
      set {
        oauthConfiguration_ = value;
      }
    }

    /// <summary>Field number for the "oauth_state_json" field.</summary>
    public const int OauthStateJsonFieldNumber = 4;
    private string oauthStateJson_ = "";
    /// <summary>
    /// The OAuth state returned from the last Connect, ConnectSession, or CompleteOAuthFlow.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OauthStateJson {
      get { return oauthStateJson_; }
      set {
        oauthStateJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SettingsJson != other.SettingsJson) return false;
      if (!object.Equals(OauthConfiguration, other.OauthConfiguration)) return false;
      if (OauthStateJson != other.OauthStateJson) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SettingsJson.Length != 0) hash ^= SettingsJson.GetHashCode();
      if (oauthConfiguration_ != null) hash ^= OauthConfiguration.GetHashCode();
      if (OauthStateJson.Length != 0) hash ^= OauthStateJson.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SettingsJson.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SettingsJson);
      }
      if (oauthConfiguration_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OauthConfiguration);
      }
      if (OauthStateJson.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OauthStateJson);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SettingsJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettingsJson);
      }
      if (oauthConfiguration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OauthConfiguration);
      }
      if (OauthStateJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OauthStateJson);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectRequest other) {
      if (other == null) {
        return;
      }
      if (other.SettingsJson.Length != 0) {
        SettingsJson = other.SettingsJson;
      }
      if (other.oauthConfiguration_ != null) {
        if (oauthConfiguration_ == null) {
          oauthConfiguration_ = new global::Pub.OAuthConfiguration();
        }
        OauthConfiguration.MergeFrom(other.OauthConfiguration);
      }
      if (other.OauthStateJson.Length != 0) {
        OauthStateJson = other.OauthStateJson;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            SettingsJson = input.ReadString();
            break;
          }
          case 26: {
            if (oauthConfiguration_ == null) {
              oauthConfiguration_ = new global::Pub.OAuthConfiguration();
            }
            input.ReadMessage(oauthConfiguration_);
            break;
          }
          case 34: {
            OauthStateJson = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Connection result information.
  /// </summary>
  public sealed partial class ConnectResponse : pb::IMessage<ConnectResponse> {
    private static readonly pb::MessageParser<ConnectResponse> _parser = new pb::MessageParser<ConnectResponse>(() => new ConnectResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse(ConnectResponse other) : this() {
      settingsError_ = other.settingsError_;
      connectionError_ = other.connectionError_;
      oauthError_ = other.oauthError_;
      oauthStateJson_ = other.oauthStateJson_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse Clone() {
      return new ConnectResponse(this);
    }

    /// <summary>Field number for the "settings_error" field.</summary>
    public const int SettingsErrorFieldNumber = 1;
    private string settingsError_ = "";
    /// <summary>
    /// If connection settings are invalid, this should contain the problem.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettingsError {
      get { return settingsError_; }
      set {
        settingsError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connection_error" field.</summary>
    public const int ConnectionErrorFieldNumber = 2;
    private string connectionError_ = "";
    /// <summary>
    /// If the connection settings appear valid, connecting to the target system failed,
    /// this should contain the error from the target system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionError {
      get { return connectionError_; }
      set {
        connectionError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oauth_error" field.</summary>
    public const int OauthErrorFieldNumber = 3;
    private string oauthError_ = "";
    /// <summary>
    /// If the OAuth state is invalid or expired, this should contain a description
    /// of the problem.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OauthError {
      get { return oauthError_; }
      set {
        oauthError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oauth_state_json" field.</summary>
    public const int OauthStateJsonFieldNumber = 4;
    private string oauthStateJson_ = "";
    /// <summary>
    /// The OAuth data which should be stored securely and passed next time
    /// a connection is requested. This is returned by Connect because
    /// forming the connection may have used up a refresh token and 
    /// the new refresh token must now be stored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OauthStateJson {
      get { return oauthStateJson_; }
      set {
        oauthStateJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SettingsError != other.SettingsError) return false;
      if (ConnectionError != other.ConnectionError) return false;
      if (OauthError != other.OauthError) return false;
      if (OauthStateJson != other.OauthStateJson) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SettingsError.Length != 0) hash ^= SettingsError.GetHashCode();
      if (ConnectionError.Length != 0) hash ^= ConnectionError.GetHashCode();
      if (OauthError.Length != 0) hash ^= OauthError.GetHashCode();
      if (OauthStateJson.Length != 0) hash ^= OauthStateJson.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SettingsError.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SettingsError);
      }
      if (ConnectionError.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ConnectionError);
      }
      if (OauthError.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OauthError);
      }
      if (OauthStateJson.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OauthStateJson);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SettingsError.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettingsError);
      }
      if (ConnectionError.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionError);
      }
      if (OauthError.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OauthError);
      }
      if (OauthStateJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OauthStateJson);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectResponse other) {
      if (other == null) {
        return;
      }
      if (other.SettingsError.Length != 0) {
        SettingsError = other.SettingsError;
      }
      if (other.ConnectionError.Length != 0) {
        ConnectionError = other.ConnectionError;
      }
      if (other.OauthError.Length != 0) {
        OauthError = other.OauthError;
      }
      if (other.OauthStateJson.Length != 0) {
        OauthStateJson = other.OauthStateJson;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SettingsError = input.ReadString();
            break;
          }
          case 18: {
            ConnectionError = input.ReadString();
            break;
          }
          case 26: {
            OauthError = input.ReadString();
            break;
          }
          case 34: {
            OauthStateJson = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReadRequest : pb::IMessage<ReadRequest> {
    private static readonly pb::MessageParser<ReadRequest> _parser = new pb::MessageParser<ReadRequest>(() => new ReadRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadRequest(ReadRequest other) : this() {
      schema_ = other.schema_ != null ? other.schema_.Clone() : null;
      limit_ = other.limit_;
      filters_ = other.filters_.Clone();
      realTimeSettingsJson_ = other.realTimeSettingsJson_;
      realTimeStateJson_ = other.realTimeStateJson_;
      jobId_ = other.jobId_;
      dataVersion_ = other.dataVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadRequest Clone() {
      return new ReadRequest(this);
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 1;
    private global::Pub.Schema schema_;
    /// <summary>
    /// The schema of the records to publish.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.Schema Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private uint limit_;
    /// <summary>
    /// Limit of number of records to return.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pub.PublishFilter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(26, global::Pub.PublishFilter.Parser);
    private readonly pbc::RepeatedField<global::Pub.PublishFilter> filters_ = new pbc::RepeatedField<global::Pub.PublishFilter>();
    /// <summary>
    /// Zero or more filters which should be applied to the returned records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pub.PublishFilter> Filters {
      get { return filters_; }
    }

    /// <summary>Field number for the "real_time_settings_json" field.</summary>
    public const int RealTimeSettingsJsonFieldNumber = 6;
    private string realTimeSettingsJson_ = "";
    /// <summary>
    /// Settings for real time publishing, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RealTimeSettingsJson {
      get { return realTimeSettingsJson_; }
      set {
        realTimeSettingsJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_time_state_json" field.</summary>
    public const int RealTimeStateJsonFieldNumber = 7;
    private string realTimeStateJson_ = "";
    /// <summary>
    /// State object from the last published record from the
    /// connection used for this publish request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RealTimeStateJson {
      get { return realTimeStateJson_; }
      set {
        realTimeStateJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "job_id" field.</summary>
    public const int JobIdFieldNumber = 8;
    private string jobId_ = "";
    /// <summary>
    /// ID for the job which contains the schema, the connection used
    /// to connect before starting this job, the real time settings and state,
    /// and so on. Can be used to persist local state between publishes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobId {
      get { return jobId_; }
      set {
        jobId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_version" field.</summary>
    public const int DataVersionFieldNumber = 9;
    private uint dataVersion_;
    /// <summary>
    /// The data_version is a counter that will be incremented whenever
    /// all data produced for a particular job_id should be discarded.    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataVersion {
      get { return dataVersion_; }
      set {
        dataVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Schema, other.Schema)) return false;
      if (Limit != other.Limit) return false;
      if(!filters_.Equals(other.filters_)) return false;
      if (RealTimeSettingsJson != other.RealTimeSettingsJson) return false;
      if (RealTimeStateJson != other.RealTimeStateJson) return false;
      if (JobId != other.JobId) return false;
      if (DataVersion != other.DataVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schema_ != null) hash ^= Schema.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      hash ^= filters_.GetHashCode();
      if (RealTimeSettingsJson.Length != 0) hash ^= RealTimeSettingsJson.GetHashCode();
      if (RealTimeStateJson.Length != 0) hash ^= RealTimeStateJson.GetHashCode();
      if (JobId.Length != 0) hash ^= JobId.GetHashCode();
      if (DataVersion != 0) hash ^= DataVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schema_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Schema);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Limit);
      }
      filters_.WriteTo(output, _repeated_filters_codec);
      if (RealTimeSettingsJson.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RealTimeSettingsJson);
      }
      if (RealTimeStateJson.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RealTimeStateJson);
      }
      if (JobId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(JobId);
      }
      if (DataVersion != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(DataVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Limit);
      }
      size += filters_.CalculateSize(_repeated_filters_codec);
      if (RealTimeSettingsJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RealTimeSettingsJson);
      }
      if (RealTimeStateJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RealTimeStateJson);
      }
      if (JobId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JobId);
      }
      if (DataVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadRequest other) {
      if (other == null) {
        return;
      }
      if (other.schema_ != null) {
        if (schema_ == null) {
          schema_ = new global::Pub.Schema();
        }
        Schema.MergeFrom(other.Schema);
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      filters_.Add(other.filters_);
      if (other.RealTimeSettingsJson.Length != 0) {
        RealTimeSettingsJson = other.RealTimeSettingsJson;
      }
      if (other.RealTimeStateJson.Length != 0) {
        RealTimeStateJson = other.RealTimeStateJson;
      }
      if (other.JobId.Length != 0) {
        JobId = other.JobId;
      }
      if (other.DataVersion != 0) {
        DataVersion = other.DataVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schema_ == null) {
              schema_ = new global::Pub.Schema();
            }
            input.ReadMessage(schema_);
            break;
          }
          case 16: {
            Limit = input.ReadUInt32();
            break;
          }
          case 26: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
          case 50: {
            RealTimeSettingsJson = input.ReadString();
            break;
          }
          case 58: {
            RealTimeStateJson = input.ReadString();
            break;
          }
          case 66: {
            JobId = input.ReadString();
            break;
          }
          case 72: {
            DataVersion = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PublishFilter : pb::IMessage<PublishFilter> {
    private static readonly pb::MessageParser<PublishFilter> _parser = new pb::MessageParser<PublishFilter>(() => new PublishFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublishFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishFilter(PublishFilter other) : this() {
      kind_ = other.kind_;
      propertyId_ = other.propertyId_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishFilter Clone() {
      return new PublishFilter(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private global::Pub.PublishFilter.Types.Kind kind_ = 0;
    /// <summary>
    /// Kind of the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.PublishFilter.Types.Kind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "property_id" field.</summary>
    public const int PropertyIdFieldNumber = 2;
    private string propertyId_ = "";
    /// <summary>
    /// The id of the property on each record which should be matched against the value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PropertyId {
      get { return propertyId_; }
      set {
        propertyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    /// <summary>
    /// The value of the which should be matched against the named property for each record, as a string.
    /// The publisher is responsible for converting the value to the correct type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublishFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublishFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (PropertyId != other.PropertyId) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (PropertyId.Length != 0) hash ^= PropertyId.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (PropertyId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PropertyId);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (PropertyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PropertyId);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublishFilter other) {
      if (other == null) {
        return;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.PropertyId.Length != 0) {
        PropertyId = other.PropertyId;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            kind_ = (global::Pub.PublishFilter.Types.Kind) input.ReadEnum();
            break;
          }
          case 18: {
            PropertyId = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PublishFilter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        /// <summary>
        /// The property on the record must equal the filter value.
        /// </summary>
        [pbr::OriginalName("EQUALS")] Equals = 0,
        /// <summary>
        /// The property on the record must be less than the filter value.
        /// </summary>
        [pbr::OriginalName("LESS_THAN")] LessThan = 1,
        /// <summary>
        /// The property on the record must be greater than the filter value.
        /// </summary>
        [pbr::OriginalName("GREATER_THAN")] GreaterThan = 2,
      }

    }
    #endregion

  }

  public sealed partial class DiscoverSchemasRequest : pb::IMessage<DiscoverSchemasRequest> {
    private static readonly pb::MessageParser<DiscoverSchemasRequest> _parser = new pb::MessageParser<DiscoverSchemasRequest>(() => new DiscoverSchemasRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscoverSchemasRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverSchemasRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverSchemasRequest(DiscoverSchemasRequest other) : this() {
      mode_ = other.mode_;
      toRefresh_ = other.toRefresh_.Clone();
      sampleSize_ = other.sampleSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverSchemasRequest Clone() {
      return new DiscoverSchemasRequest(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::Pub.DiscoverSchemasRequest.Types.Mode mode_ = 0;
    /// <summary>
    /// Mode is the discovery mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.DiscoverSchemasRequest.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "to_refresh" field.</summary>
    public const int ToRefreshFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pub.Schema> _repeated_toRefresh_codec
        = pb::FieldCodec.ForMessage(18, global::Pub.Schema.Parser);
    private readonly pbc::RepeatedField<global::Pub.Schema> toRefresh_ = new pbc::RepeatedField<global::Pub.Schema>();
    /// <summary>
    /// The schemas to refresh if mode == 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pub.Schema> ToRefresh {
      get { return toRefresh_; }
    }

    /// <summary>Field number for the "sample_size" field.</summary>
    public const int SampleSizeFieldNumber = 4;
    private uint sampleSize_;
    /// <summary>
    /// Size of the sample of records to include in the returned schemas.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SampleSize {
      get { return sampleSize_; }
      set {
        sampleSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscoverSchemasRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscoverSchemasRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if(!toRefresh_.Equals(other.toRefresh_)) return false;
      if (SampleSize != other.SampleSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      hash ^= toRefresh_.GetHashCode();
      if (SampleSize != 0) hash ^= SampleSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      toRefresh_.WriteTo(output, _repeated_toRefresh_codec);
      if (SampleSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SampleSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      size += toRefresh_.CalculateSize(_repeated_toRefresh_codec);
      if (SampleSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SampleSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscoverSchemasRequest other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      toRefresh_.Add(other.toRefresh_);
      if (other.SampleSize != 0) {
        SampleSize = other.SampleSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mode_ = (global::Pub.DiscoverSchemasRequest.Types.Mode) input.ReadEnum();
            break;
          }
          case 18: {
            toRefresh_.AddEntriesFrom(input, _repeated_toRefresh_codec);
            break;
          }
          case 32: {
            SampleSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DiscoverSchemasRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Mode {
        /// <summary>
        /// ALL means all schemas the publisher can publish should be returned.
        /// </summary>
        [pbr::OriginalName("ALL")] All = 0,
        /// <summary>
        /// REFRESH means the publisher return (updated) schemas identified by the partial schemas included in to_refresh.
        /// </summary>
        [pbr::OriginalName("REFRESH")] Refresh = 1,
      }

    }
    #endregion

  }

  public sealed partial class DiscoverSchemasResponse : pb::IMessage<DiscoverSchemasResponse> {
    private static readonly pb::MessageParser<DiscoverSchemasResponse> _parser = new pb::MessageParser<DiscoverSchemasResponse>(() => new DiscoverSchemasResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscoverSchemasResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverSchemasResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverSchemasResponse(DiscoverSchemasResponse other) : this() {
      schemas_ = other.schemas_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverSchemasResponse Clone() {
      return new DiscoverSchemasResponse(this);
    }

    /// <summary>Field number for the "schemas" field.</summary>
    public const int SchemasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pub.Schema> _repeated_schemas_codec
        = pb::FieldCodec.ForMessage(10, global::Pub.Schema.Parser);
    private readonly pbc::RepeatedField<global::Pub.Schema> schemas_ = new pbc::RepeatedField<global::Pub.Schema>();
    /// <summary>
    /// Schemas discovered by the publisher.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pub.Schema> Schemas {
      get { return schemas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscoverSchemasResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscoverSchemasResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!schemas_.Equals(other.schemas_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= schemas_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      schemas_.WriteTo(output, _repeated_schemas_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += schemas_.CalculateSize(_repeated_schemas_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscoverSchemasResponse other) {
      if (other == null) {
        return;
      }
      schemas_.Add(other.schemas_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            schemas_.AddEntriesFrom(input, _repeated_schemas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Schema : pb::IMessage<Schema> {
    private static readonly pb::MessageParser<Schema> _parser = new pb::MessageParser<Schema>(() => new Schema());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Schema> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schema() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schema(Schema other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      properties_ = other.properties_.Clone();
      count_ = other.count_ != null ? other.count_.Clone() : null;
      sample_ = other.sample_.Clone();
      query_ = other.query_;
      publisherMetaJson_ = other.publisherMetaJson_;
      errors_ = other.errors_.Clone();
      dataFlowDirection_ = other.dataFlowDirection_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schema Clone() {
      return new Schema(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID that the plugin uses to uniquely identify this schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of this schema (must be a permanant identifier which is unique in this source).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of this schema, if available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pub.Property> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(34, global::Pub.Property.Parser);
    private readonly pbc::RepeatedField<global::Pub.Property> properties_ = new pbc::RepeatedField<global::Pub.Property>();
    /// <summary>
    /// Properties of this schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pub.Property> Properties {
      get { return properties_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private global::Pub.Count count_;
    /// <summary>
    /// Count of records available in this schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.Count Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "sample" field.</summary>
    public const int SampleFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Pub.Record> _repeated_sample_codec
        = pb::FieldCodec.ForMessage(50, global::Pub.Record.Parser);
    private readonly pbc::RepeatedField<global::Pub.Record> sample_ = new pbc::RepeatedField<global::Pub.Record>();
    /// <summary>
    /// Sample containing zero or more records representative of the data in this schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pub.Record> Sample {
      get { return sample_; }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 7;
    private string query_ = "";
    /// <summary>
    /// When returned from a publisher, the optional query which can be passed to the publisher to publish records from this schema.
    /// When passed to the publisher, the query which should be used to publish records from this schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publisher_meta_json" field.</summary>
    public const int PublisherMetaJsonFieldNumber = 8;
    private string publisherMetaJson_ = "";
    /// <summary>
    /// Arbitrary JSON blob containing information the publisher uses for things like change detection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublisherMetaJson {
      get { return publisherMetaJson_; }
      set {
        publisherMetaJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_errors_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> errors_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Errors that occurred while discovering this schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Errors {
      get { return errors_; }
    }

    /// <summary>Field number for the "data_flow_direction" field.</summary>
    public const int DataFlowDirectionFieldNumber = 10;
    private global::Pub.Schema.Types.DataFlowDirection dataFlowDirection_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.Schema.Types.DataFlowDirection DataFlowDirection {
      get { return dataFlowDirection_; }
      set {
        dataFlowDirection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Schema);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Schema other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if(!properties_.Equals(other.properties_)) return false;
      if (!object.Equals(Count, other.Count)) return false;
      if(!sample_.Equals(other.sample_)) return false;
      if (Query != other.Query) return false;
      if (PublisherMetaJson != other.PublisherMetaJson) return false;
      if(!errors_.Equals(other.errors_)) return false;
      if (DataFlowDirection != other.DataFlowDirection) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= properties_.GetHashCode();
      if (count_ != null) hash ^= Count.GetHashCode();
      hash ^= sample_.GetHashCode();
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (PublisherMetaJson.Length != 0) hash ^= PublisherMetaJson.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (DataFlowDirection != 0) hash ^= DataFlowDirection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      properties_.WriteTo(output, _repeated_properties_codec);
      if (count_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Count);
      }
      sample_.WriteTo(output, _repeated_sample_codec);
      if (Query.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Query);
      }
      if (PublisherMetaJson.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PublisherMetaJson);
      }
      errors_.WriteTo(output, _repeated_errors_codec);
      if (DataFlowDirection != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) DataFlowDirection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += properties_.CalculateSize(_repeated_properties_codec);
      if (count_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Count);
      }
      size += sample_.CalculateSize(_repeated_sample_codec);
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (PublisherMetaJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublisherMetaJson);
      }
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (DataFlowDirection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataFlowDirection);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Schema other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      properties_.Add(other.properties_);
      if (other.count_ != null) {
        if (count_ == null) {
          count_ = new global::Pub.Count();
        }
        Count.MergeFrom(other.Count);
      }
      sample_.Add(other.sample_);
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.PublisherMetaJson.Length != 0) {
        PublisherMetaJson = other.PublisherMetaJson;
      }
      errors_.Add(other.errors_);
      if (other.DataFlowDirection != 0) {
        DataFlowDirection = other.DataFlowDirection;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
          case 42: {
            if (count_ == null) {
              count_ = new global::Pub.Count();
            }
            input.ReadMessage(count_);
            break;
          }
          case 50: {
            sample_.AddEntriesFrom(input, _repeated_sample_codec);
            break;
          }
          case 58: {
            Query = input.ReadString();
            break;
          }
          case 66: {
            PublisherMetaJson = input.ReadString();
            break;
          }
          case 74: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
          case 80: {
            dataFlowDirection_ = (global::Pub.Schema.Types.DataFlowDirection) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Schema message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DataFlowDirection {
        [pbr::OriginalName("READ")] Read = 0,
        [pbr::OriginalName("WRITE")] Write = 1,
        [pbr::OriginalName("READ_WRITE")] ReadWrite = 2,
      }

    }
    #endregion

  }

  public sealed partial class Count : pb::IMessage<Count> {
    private static readonly pb::MessageParser<Count> _parser = new pb::MessageParser<Count>(() => new Count());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Count> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Count() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Count(Count other) : this() {
      kind_ = other.kind_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Count Clone() {
      return new Count(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private global::Pub.Count.Types.Kind kind_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.Count.Types.Kind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Count);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Count other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Count other) {
      if (other == null) {
        return;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            kind_ = (global::Pub.Count.Types.Kind) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Count message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        [pbr::OriginalName("UNAVAILABLE")] Unavailable = 0,
        [pbr::OriginalName("ESTIMATE")] Estimate = 1,
        [pbr::OriginalName("EXACT")] Exact = 2,
      }

    }
    #endregion

  }

  public sealed partial class Property : pb::IMessage<Property> {
    private static readonly pb::MessageParser<Property> _parser = new pb::MessageParser<Property>(() => new Property());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Property> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property(Property other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      type_ = other.type_;
      isKey_ = other.isKey_;
      isCreateCounter_ = other.isCreateCounter_;
      isUpdateCounter_ = other.isUpdateCounter_;
      publisherMetaJson_ = other.publisherMetaJson_;
      typeAtSource_ = other.typeAtSource_;
      isNullable_ = other.isNullable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property Clone() {
      return new Property(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID is the permanent, unique identifier for this property.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name is an optional display name for the property.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of this property, if available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Pub.PropertyType type_ = 0;
    /// <summary>
    /// Type of the property. Use STRING if no other type matches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.PropertyType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "is_key" field.</summary>
    public const int IsKeyFieldNumber = 5;
    private bool isKey_;
    /// <summary>
    /// Set to true if this property is part of the primary key for this schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKey {
      get { return isKey_; }
      set {
        isKey_ = value;
      }
    }

    /// <summary>Field number for the "is_create_counter" field.</summary>
    public const int IsCreateCounterFieldNumber = 6;
    private bool isCreateCounter_;
    /// <summary>
    /// Set to true if this property is an orderable value which can be used
    /// to determine if one record was created more recently than another record.
    /// For example, a CreatedAt datetime column or an auto-incrementing integer primary key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCreateCounter {
      get { return isCreateCounter_; }
      set {
        isCreateCounter_ = value;
      }
    }

    /// <summary>Field number for the "is_update_counter" field.</summary>
    public const int IsUpdateCounterFieldNumber = 7;
    private bool isUpdateCounter_;
    /// <summary>
    /// Set to true if this property is an orderable value which can be used
    /// to determine if one record was updated more recently than another record.
    /// For example, an UpdatedAt datetime column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUpdateCounter {
      get { return isUpdateCounter_; }
      set {
        isUpdateCounter_ = value;
      }
    }

    /// <summary>Field number for the "publisher_meta_json" field.</summary>
    public const int PublisherMetaJsonFieldNumber = 8;
    private string publisherMetaJson_ = "";
    /// <summary>
    /// Arbitrary JSON blob containing information the publisher uses for things like change detection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublisherMetaJson {
      get { return publisherMetaJson_; }
      set {
        publisherMetaJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type_at_source" field.</summary>
    public const int TypeAtSourceFieldNumber = 9;
    private string typeAtSource_ = "";
    /// <summary>
    /// The type of the property as defined in the source system. Used to provide
    /// human-readable hints when building mappings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeAtSource {
      get { return typeAtSource_; }
      set {
        typeAtSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_nullable" field.</summary>
    public const int IsNullableFieldNumber = 10;
    private bool isNullable_;
    /// <summary>
    /// Indicates that this property is nullable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNullable {
      get { return isNullable_; }
      set {
        isNullable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Property);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Property other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Type != other.Type) return false;
      if (IsKey != other.IsKey) return false;
      if (IsCreateCounter != other.IsCreateCounter) return false;
      if (IsUpdateCounter != other.IsUpdateCounter) return false;
      if (PublisherMetaJson != other.PublisherMetaJson) return false;
      if (TypeAtSource != other.TypeAtSource) return false;
      if (IsNullable != other.IsNullable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (IsKey != false) hash ^= IsKey.GetHashCode();
      if (IsCreateCounter != false) hash ^= IsCreateCounter.GetHashCode();
      if (IsUpdateCounter != false) hash ^= IsUpdateCounter.GetHashCode();
      if (PublisherMetaJson.Length != 0) hash ^= PublisherMetaJson.GetHashCode();
      if (TypeAtSource.Length != 0) hash ^= TypeAtSource.GetHashCode();
      if (IsNullable != false) hash ^= IsNullable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (IsKey != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsKey);
      }
      if (IsCreateCounter != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsCreateCounter);
      }
      if (IsUpdateCounter != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsUpdateCounter);
      }
      if (PublisherMetaJson.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PublisherMetaJson);
      }
      if (TypeAtSource.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TypeAtSource);
      }
      if (IsNullable != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsNullable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (IsKey != false) {
        size += 1 + 1;
      }
      if (IsCreateCounter != false) {
        size += 1 + 1;
      }
      if (IsUpdateCounter != false) {
        size += 1 + 1;
      }
      if (PublisherMetaJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublisherMetaJson);
      }
      if (TypeAtSource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeAtSource);
      }
      if (IsNullable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Property other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.IsKey != false) {
        IsKey = other.IsKey;
      }
      if (other.IsCreateCounter != false) {
        IsCreateCounter = other.IsCreateCounter;
      }
      if (other.IsUpdateCounter != false) {
        IsUpdateCounter = other.IsUpdateCounter;
      }
      if (other.PublisherMetaJson.Length != 0) {
        PublisherMetaJson = other.PublisherMetaJson;
      }
      if (other.TypeAtSource.Length != 0) {
        TypeAtSource = other.TypeAtSource;
      }
      if (other.IsNullable != false) {
        IsNullable = other.IsNullable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            type_ = (global::Pub.PropertyType) input.ReadEnum();
            break;
          }
          case 40: {
            IsKey = input.ReadBool();
            break;
          }
          case 48: {
            IsCreateCounter = input.ReadBool();
            break;
          }
          case 56: {
            IsUpdateCounter = input.ReadBool();
            break;
          }
          case 66: {
            PublisherMetaJson = input.ReadString();
            break;
          }
          case 74: {
            TypeAtSource = input.ReadString();
            break;
          }
          case 80: {
            IsNullable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DisconnectRequest : pb::IMessage<DisconnectRequest> {
    private static readonly pb::MessageParser<DisconnectRequest> _parser = new pb::MessageParser<DisconnectRequest>(() => new DisconnectRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectRequest(DisconnectRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectRequest Clone() {
      return new DisconnectRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class DisconnectResponse : pb::IMessage<DisconnectResponse> {
    private static readonly pb::MessageParser<DisconnectResponse> _parser = new pb::MessageParser<DisconnectResponse>(() => new DisconnectResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectResponse(DisconnectResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectResponse Clone() {
      return new DisconnectResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Record : pb::IMessage<Record> {
    private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Record> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record(Record other) : this() {
      action_ = other.action_;
      dataJson_ = other.dataJson_;
      realTimeStateJson_ = other.realTimeStateJson_;
      cause_ = other.cause_;
      correlationId_ = other.correlationId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record Clone() {
      return new Record(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::Pub.Record.Types.Action action_ = 0;
    /// <summary>
    /// Action for this record. Default value is UPSERT if the plugin 
    /// cannot determine what the action should be relative to data alreay acquired.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.Record.Types.Action Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "data_json" field.</summary>
    public const int DataJsonFieldNumber = 2;
    private string dataJson_ = "";
    /// <summary>
    /// Data for this record, as a JSON string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataJson {
      get { return dataJson_; }
      set {
        dataJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_time_state_json" field.</summary>
    public const int RealTimeStateJsonFieldNumber = 3;
    private string realTimeStateJson_ = "";
    /// <summary>
    /// State which should be preserved and passed back to the next
    /// call of PublishStream. Only considered if action indicates this is a state commit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RealTimeStateJson {
      get { return realTimeStateJson_; }
      set {
        realTimeStateJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cause" field.</summary>
    public const int CauseFieldNumber = 4;
    private string cause_ = "";
    /// <summary>
    /// Cause for the publish of the record.
    /// If provided, this should be an end-user readable string describing what triggered the publish.
    /// This should only be set for real time published records, where the cause may be interesting.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cause {
      get { return cause_; }
      set {
        cause_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "correlation_id" field.</summary>
    public const int CorrelationIdFieldNumber = 5;
    private string correlationId_ = "";
    /// <summary>
    /// Correlation ID for a record
    /// Only expected to be used within the WriteStream method
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Record);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Record other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (DataJson != other.DataJson) return false;
      if (RealTimeStateJson != other.RealTimeStateJson) return false;
      if (Cause != other.Cause) return false;
      if (CorrelationId != other.CorrelationId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (DataJson.Length != 0) hash ^= DataJson.GetHashCode();
      if (RealTimeStateJson.Length != 0) hash ^= RealTimeStateJson.GetHashCode();
      if (Cause.Length != 0) hash ^= Cause.GetHashCode();
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      if (DataJson.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DataJson);
      }
      if (RealTimeStateJson.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RealTimeStateJson);
      }
      if (Cause.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cause);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CorrelationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (DataJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataJson);
      }
      if (RealTimeStateJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RealTimeStateJson);
      }
      if (Cause.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cause);
      }
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Record other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.DataJson.Length != 0) {
        DataJson = other.DataJson;
      }
      if (other.RealTimeStateJson.Length != 0) {
        RealTimeStateJson = other.RealTimeStateJson;
      }
      if (other.Cause.Length != 0) {
        Cause = other.Cause;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            action_ = (global::Pub.Record.Types.Action) input.ReadEnum();
            break;
          }
          case 18: {
            DataJson = input.ReadString();
            break;
          }
          case 26: {
            RealTimeStateJson = input.ReadString();
            break;
          }
          case 34: {
            Cause = input.ReadString();
            break;
          }
          case 42: {
            CorrelationId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Record message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Action {
        [pbr::OriginalName("UPSERT")] Upsert = 0,
        [pbr::OriginalName("INSERT")] Insert = 1,
        [pbr::OriginalName("UPDATE")] Update = 2,
        [pbr::OriginalName("DELETE")] Delete = 3,
        /// <summary>
        /// This action indicates that there is no data in this record;
        /// instead the real time state field on this record should be persisted.
        /// </summary>
        [pbr::OriginalName("REAL_TIME_STATE_COMMIT")] RealTimeStateCommit = 4,
      }

    }
    #endregion

  }

  public sealed partial class ConfigureQueryRequest : pb::IMessage<ConfigureQueryRequest> {
    private static readonly pb::MessageParser<ConfigureQueryRequest> _parser = new pb::MessageParser<ConfigureQueryRequest>(() => new ConfigureQueryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigureQueryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureQueryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureQueryRequest(ConfigureQueryRequest other) : this() {
      form_ = other.form_ != null ? other.form_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureQueryRequest Clone() {
      return new ConfigureQueryRequest(this);
    }

    /// <summary>Field number for the "form" field.</summary>
    public const int FormFieldNumber = 1;
    private global::Pub.ConfigurationFormRequest form_;
    /// <summary>
    /// The form state for the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.ConfigurationFormRequest Form {
      get { return form_; }
      set {
        form_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigureQueryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigureQueryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Form, other.Form)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (form_ != null) hash ^= Form.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (form_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Form);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (form_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Form);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigureQueryRequest other) {
      if (other == null) {
        return;
      }
      if (other.form_ != null) {
        if (form_ == null) {
          form_ = new global::Pub.ConfigurationFormRequest();
        }
        Form.MergeFrom(other.Form);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (form_ == null) {
              form_ = new global::Pub.ConfigurationFormRequest();
            }
            input.ReadMessage(form_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigureQueryResponse : pb::IMessage<ConfigureQueryResponse> {
    private static readonly pb::MessageParser<ConfigureQueryResponse> _parser = new pb::MessageParser<ConfigureQueryResponse>(() => new ConfigureQueryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigureQueryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureQueryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureQueryResponse(ConfigureQueryResponse other) : this() {
      form_ = other.form_ != null ? other.form_.Clone() : null;
      schema_ = other.schema_ != null ? other.schema_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureQueryResponse Clone() {
      return new ConfigureQueryResponse(this);
    }

    /// <summary>Field number for the "form" field.</summary>
    public const int FormFieldNumber = 1;
    private global::Pub.ConfigurationFormResponse form_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.ConfigurationFormResponse Form {
      get { return form_; }
      set {
        form_ = value;
      }
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 2;
    private global::Pub.Schema schema_;
    /// <summary>
    /// The schema that this query will produce.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.Schema Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigureQueryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigureQueryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Form, other.Form)) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (form_ != null) hash ^= Form.GetHashCode();
      if (schema_ != null) hash ^= Schema.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (form_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Form);
      }
      if (schema_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Schema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (form_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Form);
      }
      if (schema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigureQueryResponse other) {
      if (other == null) {
        return;
      }
      if (other.form_ != null) {
        if (form_ == null) {
          form_ = new global::Pub.ConfigurationFormResponse();
        }
        Form.MergeFrom(other.Form);
      }
      if (other.schema_ != null) {
        if (schema_ == null) {
          schema_ = new global::Pub.Schema();
        }
        Schema.MergeFrom(other.Schema);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (form_ == null) {
              form_ = new global::Pub.ConfigurationFormResponse();
            }
            input.ReadMessage(form_);
            break;
          }
          case 18: {
            if (schema_ == null) {
              schema_ = new global::Pub.Schema();
            }
            input.ReadMessage(schema_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigureConnectionRequest : pb::IMessage<ConfigureConnectionRequest> {
    private static readonly pb::MessageParser<ConfigureConnectionRequest> _parser = new pb::MessageParser<ConfigureConnectionRequest>(() => new ConfigureConnectionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigureConnectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureConnectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureConnectionRequest(ConfigureConnectionRequest other) : this() {
      form_ = other.form_ != null ? other.form_.Clone() : null;
      connectRequest_ = other.connectRequest_ != null ? other.connectRequest_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureConnectionRequest Clone() {
      return new ConfigureConnectionRequest(this);
    }

    /// <summary>Field number for the "form" field.</summary>
    public const int FormFieldNumber = 1;
    private global::Pub.ConfigurationFormRequest form_;
    /// <summary>
    /// The form state for the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.ConfigurationFormRequest Form {
      get { return form_; }
      set {
        form_ = value;
      }
    }

    /// <summary>Field number for the "connect_request" field.</summary>
    public const int ConnectRequestFieldNumber = 2;
    private global::Pub.ConnectRequest connectRequest_;
    /// <summary>
    /// An embedded ConnectRequest to support passing
    /// OAuth secrets into the connection configuration operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.ConnectRequest ConnectRequest {
      get { return connectRequest_; }
      set {
        connectRequest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigureConnectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigureConnectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Form, other.Form)) return false;
      if (!object.Equals(ConnectRequest, other.ConnectRequest)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (form_ != null) hash ^= Form.GetHashCode();
      if (connectRequest_ != null) hash ^= ConnectRequest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (form_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Form);
      }
      if (connectRequest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConnectRequest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (form_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Form);
      }
      if (connectRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectRequest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigureConnectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.form_ != null) {
        if (form_ == null) {
          form_ = new global::Pub.ConfigurationFormRequest();
        }
        Form.MergeFrom(other.Form);
      }
      if (other.connectRequest_ != null) {
        if (connectRequest_ == null) {
          connectRequest_ = new global::Pub.ConnectRequest();
        }
        ConnectRequest.MergeFrom(other.ConnectRequest);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (form_ == null) {
              form_ = new global::Pub.ConfigurationFormRequest();
            }
            input.ReadMessage(form_);
            break;
          }
          case 18: {
            if (connectRequest_ == null) {
              connectRequest_ = new global::Pub.ConnectRequest();
            }
            input.ReadMessage(connectRequest_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigureConnectionResponse : pb::IMessage<ConfigureConnectionResponse> {
    private static readonly pb::MessageParser<ConfigureConnectionResponse> _parser = new pb::MessageParser<ConfigureConnectionResponse>(() => new ConfigureConnectionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigureConnectionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureConnectionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureConnectionResponse(ConfigureConnectionResponse other) : this() {
      form_ = other.form_ != null ? other.form_.Clone() : null;
      connectResponse_ = other.connectResponse_ != null ? other.connectResponse_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureConnectionResponse Clone() {
      return new ConfigureConnectionResponse(this);
    }

    /// <summary>Field number for the "form" field.</summary>
    public const int FormFieldNumber = 1;
    private global::Pub.ConfigurationFormResponse form_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.ConfigurationFormResponse Form {
      get { return form_; }
      set {
        form_ = value;
      }
    }

    /// <summary>Field number for the "connect_response" field.</summary>
    public const int ConnectResponseFieldNumber = 2;
    private global::Pub.ConnectResponse connectResponse_;
    /// <summary>
    /// An embedded ConnectResponse to support returning
    /// updated OAuth secrets from the connection configuration operation
    /// if the secrets have been updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.ConnectResponse ConnectResponse {
      get { return connectResponse_; }
      set {
        connectResponse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigureConnectionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigureConnectionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Form, other.Form)) return false;
      if (!object.Equals(ConnectResponse, other.ConnectResponse)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (form_ != null) hash ^= Form.GetHashCode();
      if (connectResponse_ != null) hash ^= ConnectResponse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (form_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Form);
      }
      if (connectResponse_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConnectResponse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (form_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Form);
      }
      if (connectResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectResponse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigureConnectionResponse other) {
      if (other == null) {
        return;
      }
      if (other.form_ != null) {
        if (form_ == null) {
          form_ = new global::Pub.ConfigurationFormResponse();
        }
        Form.MergeFrom(other.Form);
      }
      if (other.connectResponse_ != null) {
        if (connectResponse_ == null) {
          connectResponse_ = new global::Pub.ConnectResponse();
        }
        ConnectResponse.MergeFrom(other.ConnectResponse);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (form_ == null) {
              form_ = new global::Pub.ConfigurationFormResponse();
            }
            input.ReadMessage(form_);
            break;
          }
          case 18: {
            if (connectResponse_ == null) {
              connectResponse_ = new global::Pub.ConnectResponse();
            }
            input.ReadMessage(connectResponse_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigureRealTimeRequest : pb::IMessage<ConfigureRealTimeRequest> {
    private static readonly pb::MessageParser<ConfigureRealTimeRequest> _parser = new pb::MessageParser<ConfigureRealTimeRequest>(() => new ConfigureRealTimeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigureRealTimeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureRealTimeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureRealTimeRequest(ConfigureRealTimeRequest other) : this() {
      form_ = other.form_ != null ? other.form_.Clone() : null;
      schema_ = other.schema_ != null ? other.schema_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureRealTimeRequest Clone() {
      return new ConfigureRealTimeRequest(this);
    }

    /// <summary>Field number for the "form" field.</summary>
    public const int FormFieldNumber = 1;
    private global::Pub.ConfigurationFormRequest form_;
    /// <summary>
    /// The form state for the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.ConfigurationFormRequest Form {
      get { return form_; }
      set {
        form_ = value;
      }
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 2;
    private global::Pub.Schema schema_;
    /// <summary>
    /// The schema (schema) which is being targeted for real time publishing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.Schema Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigureRealTimeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigureRealTimeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Form, other.Form)) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (form_ != null) hash ^= Form.GetHashCode();
      if (schema_ != null) hash ^= Schema.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (form_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Form);
      }
      if (schema_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Schema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (form_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Form);
      }
      if (schema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigureRealTimeRequest other) {
      if (other == null) {
        return;
      }
      if (other.form_ != null) {
        if (form_ == null) {
          form_ = new global::Pub.ConfigurationFormRequest();
        }
        Form.MergeFrom(other.Form);
      }
      if (other.schema_ != null) {
        if (schema_ == null) {
          schema_ = new global::Pub.Schema();
        }
        Schema.MergeFrom(other.Schema);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (form_ == null) {
              form_ = new global::Pub.ConfigurationFormRequest();
            }
            input.ReadMessage(form_);
            break;
          }
          case 18: {
            if (schema_ == null) {
              schema_ = new global::Pub.Schema();
            }
            input.ReadMessage(schema_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigureRealTimeResponse : pb::IMessage<ConfigureRealTimeResponse> {
    private static readonly pb::MessageParser<ConfigureRealTimeResponse> _parser = new pb::MessageParser<ConfigureRealTimeResponse>(() => new ConfigureRealTimeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigureRealTimeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureRealTimeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureRealTimeResponse(ConfigureRealTimeResponse other) : this() {
      form_ = other.form_ != null ? other.form_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureRealTimeResponse Clone() {
      return new ConfigureRealTimeResponse(this);
    }

    /// <summary>Field number for the "form" field.</summary>
    public const int FormFieldNumber = 1;
    private global::Pub.ConfigurationFormResponse form_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.ConfigurationFormResponse Form {
      get { return form_; }
      set {
        form_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigureRealTimeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigureRealTimeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Form, other.Form)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (form_ != null) hash ^= Form.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (form_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Form);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (form_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Form);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigureRealTimeResponse other) {
      if (other == null) {
        return;
      }
      if (other.form_ != null) {
        if (form_ == null) {
          form_ = new global::Pub.ConfigurationFormResponse();
        }
        Form.MergeFrom(other.Form);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (form_ == null) {
              form_ = new global::Pub.ConfigurationFormResponse();
            }
            input.ReadMessage(form_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigurationFormRequest : pb::IMessage<ConfigurationFormRequest> {
    private static readonly pb::MessageParser<ConfigurationFormRequest> _parser = new pb::MessageParser<ConfigurationFormRequest>(() => new ConfigurationFormRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigurationFormRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigurationFormRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigurationFormRequest(ConfigurationFormRequest other) : this() {
      dataJson_ = other.dataJson_;
      stateJson_ = other.stateJson_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigurationFormRequest Clone() {
      return new ConfigurationFormRequest(this);
    }

    /// <summary>Field number for the "data_json" field.</summary>
    public const int DataJsonFieldNumber = 1;
    private string dataJson_ = "";
    /// <summary>
    /// JSON object containing the current values of the settings
    /// as entered into the UI.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataJson {
      get { return dataJson_; }
      set {
        dataJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_json" field.</summary>
    public const int StateJsonFieldNumber = 2;
    private string stateJson_ = "";
    /// <summary>
    /// Opaque state object from the most recent Configure*Response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateJson {
      get { return stateJson_; }
      set {
        stateJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigurationFormRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigurationFormRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataJson != other.DataJson) return false;
      if (StateJson != other.StateJson) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataJson.Length != 0) hash ^= DataJson.GetHashCode();
      if (StateJson.Length != 0) hash ^= StateJson.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataJson.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DataJson);
      }
      if (StateJson.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StateJson);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataJson);
      }
      if (StateJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StateJson);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigurationFormRequest other) {
      if (other == null) {
        return;
      }
      if (other.DataJson.Length != 0) {
        DataJson = other.DataJson;
      }
      if (other.StateJson.Length != 0) {
        StateJson = other.StateJson;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DataJson = input.ReadString();
            break;
          }
          case 18: {
            StateJson = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigurationFormResponse : pb::IMessage<ConfigurationFormResponse> {
    private static readonly pb::MessageParser<ConfigurationFormResponse> _parser = new pb::MessageParser<ConfigurationFormResponse>(() => new ConfigurationFormResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigurationFormResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigurationFormResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigurationFormResponse(ConfigurationFormResponse other) : this() {
      schemaJson_ = other.schemaJson_;
      uiJson_ = other.uiJson_;
      stateJson_ = other.stateJson_;
      dataJson_ = other.dataJson_;
      dataErrorsJson_ = other.dataErrorsJson_;
      errors_ = other.errors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigurationFormResponse Clone() {
      return new ConfigurationFormResponse(this);
    }

    /// <summary>Field number for the "schema_json" field.</summary>
    public const int SchemaJsonFieldNumber = 1;
    private string schemaJson_ = "";
    /// <summary>
    /// The JSONSchema which should be used to build the form.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SchemaJson {
      get { return schemaJson_; }
      set {
        schemaJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ui_json" field.</summary>
    public const int UiJsonFieldNumber = 2;
    private string uiJson_ = "";
    /// <summary>
    /// The UI hints which should be provided to the form.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UiJson {
      get { return uiJson_; }
      set {
        uiJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_json" field.</summary>
    public const int StateJsonFieldNumber = 3;
    private string stateJson_ = "";
    /// <summary>
    /// The state object which should be passed in any future Configure*Request as part of this configuration session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateJson {
      get { return stateJson_; }
      set {
        stateJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_json" field.</summary>
    public const int DataJsonFieldNumber = 4;
    private string dataJson_ = "";
    /// <summary>
    /// Current values from the form.    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataJson {
      get { return dataJson_; }
      set {
        dataJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_errors_json" field.</summary>
    public const int DataErrorsJsonFieldNumber = 5;
    private string dataErrorsJson_ = "";
    /// <summary>
    /// Errors which should be displayed attached to fields in the form,
    /// in the form of a JSON object with the same schema as the data object,
    /// but the values are arrays of strings containing the error messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataErrorsJson {
      get { return dataErrorsJson_; }
      set {
        dataErrorsJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_errors_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> errors_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Generic errors which should be displayed at the bottom of the form,
    /// not associated with any specific fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Errors {
      get { return errors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigurationFormResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigurationFormResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SchemaJson != other.SchemaJson) return false;
      if (UiJson != other.UiJson) return false;
      if (StateJson != other.StateJson) return false;
      if (DataJson != other.DataJson) return false;
      if (DataErrorsJson != other.DataErrorsJson) return false;
      if(!errors_.Equals(other.errors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SchemaJson.Length != 0) hash ^= SchemaJson.GetHashCode();
      if (UiJson.Length != 0) hash ^= UiJson.GetHashCode();
      if (StateJson.Length != 0) hash ^= StateJson.GetHashCode();
      if (DataJson.Length != 0) hash ^= DataJson.GetHashCode();
      if (DataErrorsJson.Length != 0) hash ^= DataErrorsJson.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SchemaJson.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SchemaJson);
      }
      if (UiJson.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UiJson);
      }
      if (StateJson.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StateJson);
      }
      if (DataJson.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DataJson);
      }
      if (DataErrorsJson.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DataErrorsJson);
      }
      errors_.WriteTo(output, _repeated_errors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SchemaJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaJson);
      }
      if (UiJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UiJson);
      }
      if (StateJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StateJson);
      }
      if (DataJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataJson);
      }
      if (DataErrorsJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataErrorsJson);
      }
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigurationFormResponse other) {
      if (other == null) {
        return;
      }
      if (other.SchemaJson.Length != 0) {
        SchemaJson = other.SchemaJson;
      }
      if (other.UiJson.Length != 0) {
        UiJson = other.UiJson;
      }
      if (other.StateJson.Length != 0) {
        StateJson = other.StateJson;
      }
      if (other.DataJson.Length != 0) {
        DataJson = other.DataJson;
      }
      if (other.DataErrorsJson.Length != 0) {
        DataErrorsJson = other.DataErrorsJson;
      }
      errors_.Add(other.errors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SchemaJson = input.ReadString();
            break;
          }
          case 18: {
            UiJson = input.ReadString();
            break;
          }
          case 26: {
            StateJson = input.ReadString();
            break;
          }
          case 34: {
            DataJson = input.ReadString();
            break;
          }
          case 42: {
            DataErrorsJson = input.ReadString();
            break;
          }
          case 50: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BeginOAuthFlowRequest : pb::IMessage<BeginOAuthFlowRequest> {
    private static readonly pb::MessageParser<BeginOAuthFlowRequest> _parser = new pb::MessageParser<BeginOAuthFlowRequest>(() => new BeginOAuthFlowRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeginOAuthFlowRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginOAuthFlowRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginOAuthFlowRequest(BeginOAuthFlowRequest other) : this() {
      configuration_ = other.configuration_ != null ? other.configuration_.Clone() : null;
      redirectUrl_ = other.redirectUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginOAuthFlowRequest Clone() {
      return new BeginOAuthFlowRequest(this);
    }

    /// <summary>Field number for the "configuration" field.</summary>
    public const int ConfigurationFieldNumber = 1;
    private global::Pub.OAuthConfiguration configuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.OAuthConfiguration Configuration {
      get { return configuration_; }
      set {
        configuration_ = value;
      }
    }

    /// <summary>Field number for the "redirect_url" field.</summary>
    public const int RedirectUrlFieldNumber = 2;
    private string redirectUrl_ = "";
    /// <summary>
    /// The URL that the auth server should send the authorization token to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RedirectUrl {
      get { return redirectUrl_; }
      set {
        redirectUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeginOAuthFlowRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeginOAuthFlowRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Configuration, other.Configuration)) return false;
      if (RedirectUrl != other.RedirectUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (configuration_ != null) hash ^= Configuration.GetHashCode();
      if (RedirectUrl.Length != 0) hash ^= RedirectUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (configuration_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Configuration);
      }
      if (RedirectUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RedirectUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (configuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Configuration);
      }
      if (RedirectUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RedirectUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeginOAuthFlowRequest other) {
      if (other == null) {
        return;
      }
      if (other.configuration_ != null) {
        if (configuration_ == null) {
          configuration_ = new global::Pub.OAuthConfiguration();
        }
        Configuration.MergeFrom(other.Configuration);
      }
      if (other.RedirectUrl.Length != 0) {
        RedirectUrl = other.RedirectUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (configuration_ == null) {
              configuration_ = new global::Pub.OAuthConfiguration();
            }
            input.ReadMessage(configuration_);
            break;
          }
          case 18: {
            RedirectUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BeginOAuthFlowResponse : pb::IMessage<BeginOAuthFlowResponse> {
    private static readonly pb::MessageParser<BeginOAuthFlowResponse> _parser = new pb::MessageParser<BeginOAuthFlowResponse>(() => new BeginOAuthFlowResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeginOAuthFlowResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginOAuthFlowResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginOAuthFlowResponse(BeginOAuthFlowResponse other) : this() {
      authorizationUrl_ = other.authorizationUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginOAuthFlowResponse Clone() {
      return new BeginOAuthFlowResponse(this);
    }

    /// <summary>Field number for the "authorization_url" field.</summary>
    public const int AuthorizationUrlFieldNumber = 1;
    private string authorizationUrl_ = "";
    /// <summary>
    /// The URL the user should use to start the authorization process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthorizationUrl {
      get { return authorizationUrl_; }
      set {
        authorizationUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeginOAuthFlowResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeginOAuthFlowResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuthorizationUrl != other.AuthorizationUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AuthorizationUrl.Length != 0) hash ^= AuthorizationUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AuthorizationUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AuthorizationUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AuthorizationUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthorizationUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeginOAuthFlowResponse other) {
      if (other == null) {
        return;
      }
      if (other.AuthorizationUrl.Length != 0) {
        AuthorizationUrl = other.AuthorizationUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AuthorizationUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompleteOAuthFlowRequest : pb::IMessage<CompleteOAuthFlowRequest> {
    private static readonly pb::MessageParser<CompleteOAuthFlowRequest> _parser = new pb::MessageParser<CompleteOAuthFlowRequest>(() => new CompleteOAuthFlowRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompleteOAuthFlowRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteOAuthFlowRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteOAuthFlowRequest(CompleteOAuthFlowRequest other) : this() {
      configuration_ = other.configuration_ != null ? other.configuration_.Clone() : null;
      redirectUrl_ = other.redirectUrl_;
      redirectBody_ = other.redirectBody_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteOAuthFlowRequest Clone() {
      return new CompleteOAuthFlowRequest(this);
    }

    /// <summary>Field number for the "configuration" field.</summary>
    public const int ConfigurationFieldNumber = 1;
    private global::Pub.OAuthConfiguration configuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.OAuthConfiguration Configuration {
      get { return configuration_; }
      set {
        configuration_ = value;
      }
    }

    /// <summary>Field number for the "redirect_url" field.</summary>
    public const int RedirectUrlFieldNumber = 2;
    private string redirectUrl_ = "";
    /// <summary>
    /// The URL that the OAuth flow redirected the user to after authentication.
    /// If the response_mode was 'query' this will contain the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RedirectUrl {
      get { return redirectUrl_; }
      set {
        redirectUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "redirect_body" field.</summary>
    public const int RedirectBodyFieldNumber = 3;
    private string redirectBody_ = "";
    /// <summary>
    /// The body that the OAuth flow caused to be posted if the response_mode
    /// for the redirect was 'form_post'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RedirectBody {
      get { return redirectBody_; }
      set {
        redirectBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompleteOAuthFlowRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompleteOAuthFlowRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Configuration, other.Configuration)) return false;
      if (RedirectUrl != other.RedirectUrl) return false;
      if (RedirectBody != other.RedirectBody) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (configuration_ != null) hash ^= Configuration.GetHashCode();
      if (RedirectUrl.Length != 0) hash ^= RedirectUrl.GetHashCode();
      if (RedirectBody.Length != 0) hash ^= RedirectBody.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (configuration_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Configuration);
      }
      if (RedirectUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RedirectUrl);
      }
      if (RedirectBody.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RedirectBody);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (configuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Configuration);
      }
      if (RedirectUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RedirectUrl);
      }
      if (RedirectBody.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RedirectBody);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompleteOAuthFlowRequest other) {
      if (other == null) {
        return;
      }
      if (other.configuration_ != null) {
        if (configuration_ == null) {
          configuration_ = new global::Pub.OAuthConfiguration();
        }
        Configuration.MergeFrom(other.Configuration);
      }
      if (other.RedirectUrl.Length != 0) {
        RedirectUrl = other.RedirectUrl;
      }
      if (other.RedirectBody.Length != 0) {
        RedirectBody = other.RedirectBody;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (configuration_ == null) {
              configuration_ = new global::Pub.OAuthConfiguration();
            }
            input.ReadMessage(configuration_);
            break;
          }
          case 18: {
            RedirectUrl = input.ReadString();
            break;
          }
          case 26: {
            RedirectBody = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OAuthConfiguration : pb::IMessage<OAuthConfiguration> {
    private static readonly pb::MessageParser<OAuthConfiguration> _parser = new pb::MessageParser<OAuthConfiguration>(() => new OAuthConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OAuthConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OAuthConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OAuthConfiguration(OAuthConfiguration other) : this() {
      clientId_ = other.clientId_;
      clientSecret_ = other.clientSecret_;
      configurationJson_ = other.configurationJson_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OAuthConfiguration Clone() {
      return new OAuthConfiguration(this);
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 1;
    private string clientId_ = "";
    /// <summary>
    /// Client ID to use for resolving codes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_secret" field.</summary>
    public const int ClientSecretFieldNumber = 2;
    private string clientSecret_ = "";
    /// <summary>
    /// Client secret to use for resolving codes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientSecret {
      get { return clientSecret_; }
      set {
        clientSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "configuration_json" field.</summary>
    public const int ConfigurationJsonFieldNumber = 3;
    private string configurationJson_ = "";
    /// <summary>
    /// The configuration blob stored for this plugin type,
    /// which can contain any data that should not be hard coded into the plugin.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfigurationJson {
      get { return configurationJson_; }
      set {
        configurationJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OAuthConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OAuthConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientId != other.ClientId) return false;
      if (ClientSecret != other.ClientSecret) return false;
      if (ConfigurationJson != other.ConfigurationJson) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      if (ClientSecret.Length != 0) hash ^= ClientSecret.GetHashCode();
      if (ConfigurationJson.Length != 0) hash ^= ConfigurationJson.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientId);
      }
      if (ClientSecret.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientSecret);
      }
      if (ConfigurationJson.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ConfigurationJson);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (ClientSecret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientSecret);
      }
      if (ConfigurationJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigurationJson);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OAuthConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      if (other.ClientSecret.Length != 0) {
        ClientSecret = other.ClientSecret;
      }
      if (other.ConfigurationJson.Length != 0) {
        ConfigurationJson = other.ConfigurationJson;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientId = input.ReadString();
            break;
          }
          case 18: {
            ClientSecret = input.ReadString();
            break;
          }
          case 26: {
            ConfigurationJson = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompleteOAuthFlowResponse : pb::IMessage<CompleteOAuthFlowResponse> {
    private static readonly pb::MessageParser<CompleteOAuthFlowResponse> _parser = new pb::MessageParser<CompleteOAuthFlowResponse>(() => new CompleteOAuthFlowResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompleteOAuthFlowResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteOAuthFlowResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteOAuthFlowResponse(CompleteOAuthFlowResponse other) : this() {
      oauthStateJson_ = other.oauthStateJson_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteOAuthFlowResponse Clone() {
      return new CompleteOAuthFlowResponse(this);
    }

    /// <summary>Field number for the "oauth_state_json" field.</summary>
    public const int OauthStateJsonFieldNumber = 1;
    private string oauthStateJson_ = "";
    /// <summary>
    /// JSON data containing the OAuth information the plugin wants
    /// to be passed to any connect request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OauthStateJson {
      get { return oauthStateJson_; }
      set {
        oauthStateJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompleteOAuthFlowResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompleteOAuthFlowResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OauthStateJson != other.OauthStateJson) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OauthStateJson.Length != 0) hash ^= OauthStateJson.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OauthStateJson.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OauthStateJson);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OauthStateJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OauthStateJson);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompleteOAuthFlowResponse other) {
      if (other == null) {
        return;
      }
      if (other.OauthStateJson.Length != 0) {
        OauthStateJson = other.OauthStateJson;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OauthStateJson = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigureWriteRequest : pb::IMessage<ConfigureWriteRequest> {
    private static readonly pb::MessageParser<ConfigureWriteRequest> _parser = new pb::MessageParser<ConfigureWriteRequest>(() => new ConfigureWriteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigureWriteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureWriteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureWriteRequest(ConfigureWriteRequest other) : this() {
      form_ = other.form_ != null ? other.form_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureWriteRequest Clone() {
      return new ConfigureWriteRequest(this);
    }

    /// <summary>Field number for the "form" field.</summary>
    public const int FormFieldNumber = 1;
    private global::Pub.ConfigurationFormRequest form_;
    /// <summary>
    /// The form state for the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.ConfigurationFormRequest Form {
      get { return form_; }
      set {
        form_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigureWriteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigureWriteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Form, other.Form)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (form_ != null) hash ^= Form.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (form_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Form);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (form_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Form);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigureWriteRequest other) {
      if (other == null) {
        return;
      }
      if (other.form_ != null) {
        if (form_ == null) {
          form_ = new global::Pub.ConfigurationFormRequest();
        }
        Form.MergeFrom(other.Form);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (form_ == null) {
              form_ = new global::Pub.ConfigurationFormRequest();
            }
            input.ReadMessage(form_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigureWriteResponse : pb::IMessage<ConfigureWriteResponse> {
    private static readonly pb::MessageParser<ConfigureWriteResponse> _parser = new pb::MessageParser<ConfigureWriteResponse>(() => new ConfigureWriteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigureWriteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureWriteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureWriteResponse(ConfigureWriteResponse other) : this() {
      form_ = other.form_ != null ? other.form_.Clone() : null;
      schema_ = other.schema_ != null ? other.schema_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigureWriteResponse Clone() {
      return new ConfigureWriteResponse(this);
    }

    /// <summary>Field number for the "form" field.</summary>
    public const int FormFieldNumber = 1;
    private global::Pub.ConfigurationFormResponse form_;
    /// <summary>
    /// Configuration object to build the ui
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.ConfigurationFormResponse Form {
      get { return form_; }
      set {
        form_ = value;
      }
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 2;
    private global::Pub.Schema schema_;
    /// <summary>
    /// The schema (schema) which is being targeted for write backs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.Schema Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigureWriteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigureWriteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Form, other.Form)) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (form_ != null) hash ^= Form.GetHashCode();
      if (schema_ != null) hash ^= Schema.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (form_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Form);
      }
      if (schema_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Schema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (form_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Form);
      }
      if (schema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigureWriteResponse other) {
      if (other == null) {
        return;
      }
      if (other.form_ != null) {
        if (form_ == null) {
          form_ = new global::Pub.ConfigurationFormResponse();
        }
        Form.MergeFrom(other.Form);
      }
      if (other.schema_ != null) {
        if (schema_ == null) {
          schema_ = new global::Pub.Schema();
        }
        Schema.MergeFrom(other.Schema);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (form_ == null) {
              form_ = new global::Pub.ConfigurationFormResponse();
            }
            input.ReadMessage(form_);
            break;
          }
          case 18: {
            if (schema_ == null) {
              schema_ = new global::Pub.Schema();
            }
            input.ReadMessage(schema_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrepareWriteRequest : pb::IMessage<PrepareWriteRequest> {
    private static readonly pb::MessageParser<PrepareWriteRequest> _parser = new pb::MessageParser<PrepareWriteRequest>(() => new PrepareWriteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrepareWriteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareWriteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareWriteRequest(PrepareWriteRequest other) : this() {
      commitSlaSeconds_ = other.commitSlaSeconds_;
      schema_ = other.schema_ != null ? other.schema_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareWriteRequest Clone() {
      return new PrepareWriteRequest(this);
    }

    /// <summary>Field number for the "commit_sla_seconds" field.</summary>
    public const int CommitSlaSecondsFieldNumber = 1;
    private int commitSlaSeconds_;
    /// <summary>
    /// Time in seconds that a record write back must be acknowledged by the plugin in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommitSlaSeconds {
      get { return commitSlaSeconds_; }
      set {
        commitSlaSeconds_ = value;
      }
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 2;
    private global::Pub.Schema schema_;
    /// <summary>
    /// Schema to write back to source system
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.Schema Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrepareWriteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrepareWriteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommitSlaSeconds != other.CommitSlaSeconds) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommitSlaSeconds != 0) hash ^= CommitSlaSeconds.GetHashCode();
      if (schema_ != null) hash ^= Schema.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommitSlaSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CommitSlaSeconds);
      }
      if (schema_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Schema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommitSlaSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommitSlaSeconds);
      }
      if (schema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrepareWriteRequest other) {
      if (other == null) {
        return;
      }
      if (other.CommitSlaSeconds != 0) {
        CommitSlaSeconds = other.CommitSlaSeconds;
      }
      if (other.schema_ != null) {
        if (schema_ == null) {
          schema_ = new global::Pub.Schema();
        }
        Schema.MergeFrom(other.Schema);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CommitSlaSeconds = input.ReadInt32();
            break;
          }
          case 18: {
            if (schema_ == null) {
              schema_ = new global::Pub.Schema();
            }
            input.ReadMessage(schema_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrepareWriteResponse : pb::IMessage<PrepareWriteResponse> {
    private static readonly pb::MessageParser<PrepareWriteResponse> _parser = new pb::MessageParser<PrepareWriteResponse>(() => new PrepareWriteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrepareWriteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareWriteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareWriteResponse(PrepareWriteResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareWriteResponse Clone() {
      return new PrepareWriteResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrepareWriteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrepareWriteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrepareWriteResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RecordAck : pb::IMessage<RecordAck> {
    private static readonly pb::MessageParser<RecordAck> _parser = new pb::MessageParser<RecordAck>(() => new RecordAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordAck(RecordAck other) : this() {
      correlationId_ = other.correlationId_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordAck Clone() {
      return new RecordAck(this);
    }

    /// <summary>Field number for the "correlation_id" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    /// <summary>
    /// Correlation ID for record that has been written back
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    /// <summary>
    /// Contains information about any error in writing back the record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordAck other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
